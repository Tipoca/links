type token =
  | END
  | EQ
  | IN
  | FUN
  | RARROW
  | IF
  | ELSE
  | EQEQ
  | LESS
  | LESSEQUAL
  | MORE
  | MOREEQUAL
  | DIFFERENT
  | BEGINSWITH
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | PLUSDOT
  | MINUSDOT
  | STARDOT
  | SLASHDOT
  | PLUSPLUS
  | HATHAT
  | HAT
  | SWITCH
  | RECEIVE
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LQUOTE
  | RQUOTE
  | LSET
  | LBAG
  | RBRACKET
  | LBRACKET
  | SORT_UP
  | SORT_DOWN
  | FOR
  | LARROW
  | HANDLE
  | WHERE
  | AMPER
  | COMMA
  | VBAR
  | DOT
  | COLON
  | TABLE
  | FROM
  | DATABASE
  | WITH
  | UNIQUE
  | ORDER
  | ASC
  | DESC
  | UPDATE
  | DELETE
  | INSERT
  | BY
  | VALUES
  | INTO
  | ESCAPE
  | CLIENT
  | SERVER
  | NAMESPACE
  | SEMICOLON
  | TRUE
  | FALSE
  | BARBAR
  | AMPAMP
  | NOT
  | UINTEGER of (Num.num)
  | UFLOAT of (float)
  | STRING of (string)
  | CDATA of (string)
  | CHAR of (char)
  | VARIABLE of (string)
  | CONSTRUCTOR of (string)
  | LXML of (string)
  | ENDTAG of (string)
  | RXML
  | SLASHRXML
  | TVARIABLE of (int)
  | TINT
  | TFLOAT
  | TBOOL
  | TSTRING

open Parsing;;
# 2 "sl_parser.mly"

open Num
open Sl_kind
open Sl_sugar
open Parsing

(*
val symbol_start, symbol_end : unit -> int

  symbol_start and Parsing.symbol_end are to be called in the action
  part of a grammar rule only. They return the offset of the string that
  matches the left-hand side of the rule: symbol_start() returns the
  offset of the first character; symbol_end() returns the offset after
  the last character. The first character in a file is at offset 0.

val rhs_start, rhs_end : int -> int

  Same as Parsing.symbol_start and Parsing.symbol_end, but return the
  offset of the string matching the nth item on the right-hand side of
  the rule, where n is the integer parameter to rhs_start and
  rhs_end. n is 1 for the leftmost item.

val symbol_start_pos, symbol_end_pos : unit -> Lexing.position

  Same as symbol_start, symbol_end, but return a position instead of an offset.

val rhs_start_pos, rhs_end_pos : int -> Lexing.position

  Same as rhs_start, rhs_end_pos, but return a position instead of an offset.

val clear_parser : unit -> unit

  Empty the parser stack. Call it just after a parsing function has
  returned, to remove all pointers from the parser stack to structures
  that were built by semantic actions during parsing. This is
  optional, but lowers the memory requirements of the programs.

exception Parse_error

  Raised when a parser encounters a syntax error. Can also be raised
  from the action part of a grammar rule, to initiate error recovery.
*)

let parse_error msg = 
  failwith "Syntax error"
    (*raise (Sl_syntax.Parse_failure (!curr_pos, "Syntax error:"))*)

let ensure_match (opening : string) (closing : string) = function
  | result when opening = closing -> result
  | _ -> failwith ("Closing tag " ^ opening ^ " does not match closing tag " ^ closing)

let pos () = symbol_start_pos (), symbol_end_pos ()

# 147 "sl_parser.ml"
let yytransl_const = [|
  257 (* END *);
  258 (* EQ *);
  259 (* IN *);
  260 (* FUN *);
  261 (* RARROW *);
  262 (* IF *);
  263 (* ELSE *);
  264 (* EQEQ *);
  265 (* LESS *);
  266 (* LESSEQUAL *);
  267 (* MORE *);
  268 (* MOREEQUAL *);
  269 (* DIFFERENT *);
  270 (* BEGINSWITH *);
  271 (* PLUS *);
  272 (* MINUS *);
  273 (* STAR *);
  274 (* SLASH *);
  275 (* PLUSDOT *);
  276 (* MINUSDOT *);
  277 (* STARDOT *);
  278 (* SLASHDOT *);
  279 (* PLUSPLUS *);
  280 (* HATHAT *);
  281 (* HAT *);
  282 (* SWITCH *);
  283 (* RECEIVE *);
  284 (* LPAREN *);
  285 (* RPAREN *);
  286 (* LBRACE *);
  287 (* RBRACE *);
  288 (* LQUOTE *);
  289 (* RQUOTE *);
  290 (* LSET *);
  291 (* LBAG *);
  292 (* RBRACKET *);
  293 (* LBRACKET *);
  294 (* SORT_UP *);
  295 (* SORT_DOWN *);
  296 (* FOR *);
  297 (* LARROW *);
  298 (* HANDLE *);
  299 (* WHERE *);
  300 (* AMPER *);
  301 (* COMMA *);
  302 (* VBAR *);
  303 (* DOT *);
  304 (* COLON *);
  305 (* TABLE *);
  306 (* FROM *);
  307 (* DATABASE *);
  308 (* WITH *);
  309 (* UNIQUE *);
  310 (* ORDER *);
  311 (* ASC *);
  312 (* DESC *);
  313 (* UPDATE *);
  314 (* DELETE *);
  315 (* INSERT *);
  316 (* BY *);
  317 (* VALUES *);
  318 (* INTO *);
  319 (* ESCAPE *);
  320 (* CLIENT *);
  321 (* SERVER *);
  322 (* NAMESPACE *);
  323 (* SEMICOLON *);
  324 (* TRUE *);
  325 (* FALSE *);
  326 (* BARBAR *);
  327 (* AMPAMP *);
  328 (* NOT *);
  338 (* RXML *);
  339 (* SLASHRXML *);
  341 (* TINT *);
  342 (* TFLOAT *);
  343 (* TBOOL *);
  344 (* TSTRING *);
    0|]

let yytransl_block = [|
  329 (* UINTEGER *);
  330 (* UFLOAT *);
  331 (* STRING *);
  332 (* CDATA *);
  333 (* CHAR *);
  334 (* VARIABLE *);
  335 (* CONSTRUCTOR *);
  336 (* LXML *);
  337 (* ENDTAG *);
  340 (* TVARIABLE *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\004\000\004\000\004\000\004\000\006\000\
\007\000\007\000\007\000\011\000\011\000\011\000\011\000\011\000\
\011\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\016\000\016\000\016\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\019\000\019\000\019\000\019\000\019\000\013\000\013\000\
\021\000\021\000\021\000\021\000\022\000\022\000\022\000\023\000\
\023\000\023\000\023\000\023\000\024\000\024\000\024\000\024\000\
\024\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\026\000\026\000\026\000\026\000\027\000\027\000\028\000\
\028\000\028\000\028\000\028\000\014\000\029\000\029\000\030\000\
\031\000\031\000\032\000\032\000\033\000\033\000\033\000\033\000\
\002\000\002\000\002\000\002\000\002\000\002\000\034\000\034\000\
\035\000\035\000\035\000\036\000\036\000\037\000\037\000\038\000\
\038\000\040\000\040\000\040\000\041\000\042\000\042\000\046\000\
\046\000\046\000\048\000\048\000\049\000\049\000\049\000\008\000\
\008\000\050\000\051\000\051\000\051\000\052\000\052\000\053\000\
\009\000\009\000\010\000\010\000\005\000\044\000\044\000\045\000\
\045\000\045\000\054\000\054\000\054\000\054\000\018\000\018\000\
\020\000\020\000\047\000\039\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\056\000\
\056\000\055\000\055\000\055\000\000\000"

let yylen = "\002\000\
\002\000\002\000\001\000\002\000\001\000\005\000\006\000\005\000\
\001\000\001\000\000\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\003\000\002\000\003\000\002\000\
\003\000\004\000\004\000\001\000\001\000\001\000\002\000\002\000\
\003\000\004\000\004\000\002\000\005\000\003\000\003\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\004\000\003\000\003\000\001\000\
\002\000\002\000\001\000\001\000\001\000\003\000\003\000\001\000\
\003\000\003\000\003\000\003\000\001\000\003\000\003\000\003\000\
\003\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\001\000\003\000\003\000\002\000\001\000\003\000\001\000\
\008\000\009\000\009\000\002\000\001\000\001\000\002\000\001\000\
\001\000\002\000\005\000\004\000\001\000\001\000\002\000\002\000\
\002\000\003\000\004\000\004\000\003\000\005\000\001\000\002\000\
\001\000\001\000\001\000\001\000\007\000\001\000\002\000\004\000\
\003\000\001\000\006\000\005\000\003\000\001\000\008\000\001\000\
\004\000\006\000\001\000\004\000\001\000\006\000\003\000\001\000\
\002\000\001\000\004\000\002\000\004\000\001\000\002\000\001\000\
\005\000\004\000\001\000\000\000\001\000\001\000\000\000\004\000\
\003\000\000\000\005\000\005\000\003\000\003\000\003\000\005\000\
\001\000\001\000\003\000\001\000\003\000\001\000\001\000\001\000\
\001\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\
\016\000\000\000\012\000\013\000\014\000\017\000\000\000\000\000\
\000\000\181\000\000\000\000\000\000\000\000\000\005\000\051\000\
\019\000\050\000\028\000\029\000\060\000\000\000\061\000\000\000\
\000\000\000\000\000\000\000\000\000\000\116\000\093\000\122\000\
\126\000\128\000\131\000\133\000\144\000\149\000\000\000\000\000\
\138\000\000\000\000\000\018\000\057\000\058\000\000\000\000\000\
\043\000\000\000\040\000\041\000\048\000\000\000\045\000\046\000\
\047\000\042\000\036\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\142\000\000\000\
\020\000\000\000\022\000\000\000\024\000\000\000\000\000\000\000\
\164\000\000\000\000\000\000\000\000\000\092\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\009\000\000\000\031\000\
\032\000\096\000\000\000\105\000\000\000\000\000\097\000\095\000\
\001\000\002\000\004\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\135\000\137\000\000\000\000\000\000\000\000\000\
\000\000\039\000\033\000\038\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\143\000\021\000\023\000\025\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\115\000\106\000\114\000\113\000\
\000\000\000\000\000\000\000\000\109\000\098\000\052\000\000\000\
\162\000\161\000\054\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\034\000\055\000\000\000\
\000\000\000\000\146\000\000\000\000\000\026\000\027\000\163\000\
\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\170\000\167\000\168\000\166\000\169\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\107\000\112\000\000\000\108\000\
\000\000\053\000\000\000\000\000\000\000\000\000\124\000\000\000\
\000\000\119\000\037\000\000\000\141\000\139\000\145\000\000\000\
\000\000\000\000\000\000\180\000\000\000\000\000\000\000\000\000\
\000\000\000\000\150\000\000\000\000\000\000\000\000\000\008\000\
\006\000\100\000\000\000\000\000\000\000\110\000\147\000\007\000\
\000\000\121\000\000\000\000\000\123\000\160\000\130\000\134\000\
\165\000\000\000\172\000\000\000\173\000\174\000\175\000\000\000\
\000\000\000\000\000\000\000\000\000\000\104\000\103\000\099\000\
\117\000\120\000\125\000\177\000\000\000\178\000\000\000\000\000\
\000\000\000\000\000\000\153\000\000\000\000\000\127\000\089\000\
\000\000\000\000\000\000\152\000\090\000\091\000\000\000\000\000\
\000\000\000\000\155\000\156\000"

let yydgoto = "\002\000\
\034\000\035\000\036\000\037\000\087\000\039\000\119\000\064\000\
\040\000\169\000\041\000\042\000\088\000\043\000\044\000\045\000\
\089\000\090\000\046\000\091\000\047\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\125\000\126\000\127\000\
\045\001\193\000\194\000\056\000\227\000\228\000\094\000\057\000\
\017\001\058\000\254\000\036\001\066\001\059\000\107\000\060\000\
\061\000\066\000\095\000\096\000\062\000\086\001\029\001\030\001"

let yysindex = "\039\000\
\200\006\000\000\249\254\100\255\059\010\059\010\227\008\123\006\
\048\009\021\007\098\007\175\007\118\255\124\255\227\008\227\008\
\037\255\088\255\148\255\139\255\145\255\131\255\141\255\000\000\
\000\000\059\010\000\000\000\000\000\000\000\000\072\255\247\255\
\121\255\000\000\143\255\220\255\200\006\161\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\102\255\000\000\135\255\
\184\255\195\255\172\255\146\255\210\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\214\255\208\255\
\000\000\214\255\227\008\000\000\000\000\000\000\214\255\229\255\
\000\000\059\010\000\000\000\000\000\000\059\010\000\000\000\000\
\000\000\000\000\000\000\217\254\000\000\000\000\217\255\234\255\
\244\255\255\254\016\000\009\255\211\255\018\000\000\000\048\009\
\000\000\241\255\000\000\251\255\000\000\252\255\227\008\227\008\
\000\000\242\255\022\255\238\255\240\255\000\000\226\255\011\000\
\019\000\043\000\050\000\195\255\000\000\000\000\051\000\000\000\
\000\000\000\000\059\255\000\000\053\000\157\255\000\000\000\000\
\000\000\000\000\000\000\252\007\097\255\038\006\038\006\059\010\
\059\010\059\010\059\010\059\010\059\010\059\010\059\010\059\010\
\059\010\059\010\059\010\059\010\059\010\059\010\059\010\059\010\
\031\010\072\255\000\000\000\000\027\000\239\255\032\000\034\000\
\227\008\000\000\000\000\000\000\227\008\227\008\214\255\000\000\
\036\000\227\008\211\255\000\000\000\000\000\000\000\000\047\000\
\048\000\227\008\227\008\227\008\003\000\160\255\033\000\007\000\
\008\000\038\006\009\000\227\008\000\000\000\000\000\000\000\000\
\005\000\003\255\055\000\067\255\000\000\000\000\000\000\056\000\
\000\000\000\000\000\000\102\255\102\255\135\255\135\255\135\255\
\135\255\184\255\184\255\184\255\184\255\195\255\195\255\195\255\
\195\255\195\255\195\255\195\255\172\255\172\255\146\255\208\255\
\227\008\073\008\251\254\239\255\000\000\000\000\000\000\063\000\
\049\000\208\255\000\000\054\000\083\000\000\000\000\000\000\000\
\000\000\112\000\115\000\160\255\207\254\160\255\160\255\160\255\
\000\000\000\000\000\000\000\000\000\000\004\255\227\008\077\000\
\078\000\102\255\058\000\059\000\000\000\000\000\099\255\000\000\
\046\000\000\000\061\000\123\000\227\008\127\000\000\000\131\000\
\106\000\000\000\000\000\097\255\000\000\000\000\000\000\227\008\
\227\008\027\255\090\000\000\000\108\000\096\000\025\255\109\255\
\114\255\160\255\000\000\089\000\113\000\227\008\227\008\000\000\
\000\000\000\000\078\255\078\255\111\000\000\000\000\000\000\000\
\227\008\000\000\227\008\227\008\000\000\000\000\000\000\000\000\
\000\000\070\255\000\000\207\254\000\000\000\000\000\000\140\000\
\109\000\097\000\091\000\119\000\120\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\140\000\000\000\063\255\227\008\
\227\008\092\000\093\000\000\000\102\000\116\000\000\000\000\000\
\227\008\227\008\117\255\000\000\000\000\000\000\117\000\118\000\
\079\000\079\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\015\010\127\009\
\000\000\000\000\088\000\000\000\155\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\166\000\000\000\144\001\
\039\255\174\003\030\005\214\005\012\006\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\051\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\132\000\000\000\000\000\000\000\135\000\000\000\000\000\
\000\000\000\000\000\000\000\000\191\009\231\009\002\255\000\000\
\000\000\000\000\000\000\000\000\111\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\076\005\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\150\008\
\000\000\000\000\111\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\084\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\244\000\066\001\222\001\044\002\122\002\
\200\002\246\002\036\003\082\003\128\003\220\003\010\004\056\004\
\102\004\148\004\194\004\240\004\122\005\168\005\004\006\000\000\
\000\000\000\000\000\000\012\255\000\000\000\000\000\000\000\000\
\105\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\112\255\000\000\000\000\
\000\000\058\006\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\192\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\139\000\000\000\000\000\
\000\000\000\000\000\000\122\000\000\000\000\000\000\000\000\000\
\000\000\000\000\159\000\160\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\238\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\158\000\162\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\156\255\162\001\000\000\255\255\000\000\046\001\200\255\
\193\255\090\255\000\000\169\001\006\000\000\000\001\000\171\001\
\000\000\184\000\133\255\072\001\014\000\161\000\188\000\233\255\
\040\000\053\001\000\000\000\000\173\001\000\000\000\000\084\001\
\209\255\084\255\000\000\000\000\241\000\000\000\243\255\000\000\
\000\000\000\000\086\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\118\001\000\000\000\000\159\255\156\000\000\000"

let yytablesize = 2955
let yytable = "\038\000\
\155\000\106\000\116\000\065\000\237\000\072\000\154\000\093\000\
\034\001\156\000\204\000\205\000\176\000\105\000\108\000\098\000\
\100\000\102\000\069\000\070\000\008\000\006\001\191\000\009\001\
\179\000\015\001\176\000\164\000\027\001\034\001\056\000\034\001\
\009\000\159\000\028\001\038\000\008\000\056\000\160\000\001\000\
\069\000\069\000\118\000\069\000\165\000\069\000\069\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\057\001\
\035\001\069\000\069\000\192\000\061\001\069\000\002\001\065\000\
\180\000\157\000\065\000\069\000\069\000\069\000\063\000\065\000\
\016\001\026\001\069\000\031\001\032\001\033\001\189\000\069\000\
\136\000\069\000\033\000\069\000\069\000\076\001\167\000\069\000\
\009\000\118\000\069\000\070\000\065\000\191\000\171\000\191\000\
\009\000\244\000\084\001\245\000\048\001\176\000\177\000\246\000\
\247\000\069\000\248\000\009\000\069\000\069\000\234\000\109\000\
\164\000\034\001\136\000\136\000\069\000\069\000\034\001\064\001\
\214\000\215\000\216\000\217\000\218\000\219\000\220\000\067\000\
\009\000\132\000\192\000\042\001\192\000\159\000\189\000\117\000\
\118\000\200\000\033\000\190\000\085\001\148\000\189\000\077\001\
\062\001\103\000\033\000\008\001\133\000\063\001\159\000\104\000\
\043\001\249\000\250\000\251\000\252\000\253\000\134\000\135\000\
\011\001\151\000\110\000\232\000\233\000\151\000\231\000\065\000\
\236\000\201\000\021\001\095\001\096\001\043\001\202\000\111\000\
\240\000\241\000\242\000\144\000\145\000\146\000\147\000\148\000\
\149\000\150\000\004\001\244\000\112\000\245\000\221\000\222\000\
\148\000\246\000\247\000\148\000\248\000\148\000\122\000\044\001\
\136\000\137\000\123\000\124\000\138\000\139\000\113\000\148\000\
\114\000\140\000\141\000\148\000\014\001\142\000\143\000\151\000\
\152\000\148\000\115\000\148\000\129\000\148\000\033\000\012\001\
\105\000\148\000\148\000\131\000\148\000\148\000\148\000\148\000\
\153\000\148\000\122\000\044\001\044\001\009\000\196\000\197\000\
\148\000\008\000\148\000\249\000\250\000\251\000\252\000\253\000\
\148\000\148\000\148\000\070\001\071\001\037\001\148\000\099\001\
\100\001\148\000\158\000\148\000\148\000\161\000\162\000\148\000\
\148\000\148\000\148\000\050\001\148\000\148\000\148\000\148\000\
\163\000\166\000\008\000\170\000\173\000\168\000\055\001\056\001\
\010\000\011\000\178\000\012\000\013\000\014\000\174\000\175\000\
\171\000\181\000\171\000\182\000\068\001\069\001\184\000\171\000\
\206\000\207\000\208\000\209\000\183\000\186\000\185\000\073\001\
\171\000\074\001\075\001\187\000\188\000\171\000\195\000\225\000\
\171\000\171\000\024\000\025\000\229\000\226\000\230\000\027\000\
\028\000\029\000\235\000\030\000\068\000\032\000\033\000\210\000\
\211\000\212\000\213\000\238\000\239\000\255\000\087\001\088\001\
\243\000\000\001\001\001\003\001\010\001\005\001\007\001\093\001\
\094\001\094\000\094\000\019\001\094\000\020\001\094\000\094\000\
\094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
\094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
\094\000\023\001\024\001\094\000\094\000\094\000\094\000\025\001\
\022\001\038\001\039\001\094\000\040\001\041\001\046\001\047\001\
\094\000\049\001\094\000\051\001\094\000\094\000\094\000\052\001\
\053\001\058\001\059\001\094\000\060\001\067\001\065\001\072\001\
\034\001\079\001\080\001\082\001\083\001\091\001\081\001\092\001\
\089\001\090\001\094\000\003\000\085\001\094\000\094\000\011\000\
\044\000\097\001\098\001\049\000\111\000\094\000\094\000\059\000\
\059\000\179\000\059\000\154\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\102\000\
\101\000\157\000\059\000\059\000\059\000\158\000\130\000\224\000\
\120\000\059\000\121\000\054\001\203\000\223\000\059\000\128\000\
\059\000\198\000\059\000\059\000\018\001\172\000\000\000\078\001\
\000\000\059\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\059\000\000\000\000\000\059\000\059\000\000\000\000\000\000\000\
\000\000\000\000\000\000\059\000\059\000\063\000\063\000\000\000\
\063\000\000\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\000\000\000\000\000\000\
\063\000\063\000\063\000\000\000\000\000\000\000\000\000\063\000\
\000\000\000\000\000\000\000\000\063\000\000\000\063\000\000\000\
\063\000\063\000\000\000\000\000\000\000\000\000\000\000\063\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\063\000\000\000\
\000\000\063\000\063\000\000\000\000\000\000\000\000\000\000\000\
\000\000\063\000\063\000\062\000\062\000\000\000\062\000\000\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\000\000\000\000\000\000\062\000\062\000\
\062\000\000\000\000\000\000\000\000\000\062\000\000\000\000\000\
\000\000\000\000\062\000\000\000\062\000\000\000\062\000\062\000\
\000\000\000\000\000\000\000\000\000\000\062\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\062\000\000\000\000\000\062\000\
\062\000\000\000\000\000\000\000\000\000\000\000\000\000\062\000\
\062\000\064\000\064\000\000\000\064\000\000\000\064\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\000\000\
\000\000\000\000\000\000\000\000\064\000\064\000\064\000\000\000\
\000\000\000\000\000\000\064\000\000\000\000\000\000\000\000\000\
\064\000\000\000\064\000\000\000\064\000\064\000\000\000\000\000\
\000\000\000\000\000\000\064\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\064\000\000\000\000\000\064\000\064\000\000\000\
\000\000\000\000\000\000\000\000\000\000\064\000\064\000\065\000\
\065\000\000\000\065\000\000\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\000\000\000\000\000\000\
\000\000\000\000\065\000\065\000\065\000\000\000\000\000\000\000\
\000\000\065\000\000\000\000\000\000\000\000\000\065\000\000\000\
\065\000\000\000\065\000\065\000\000\000\000\000\000\000\000\000\
\000\000\065\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\065\000\000\000\000\000\065\000\065\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\000\065\000\066\000\066\000\000\000\
\066\000\000\000\066\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\000\000\000\000\000\000\000\000\000\000\
\066\000\066\000\066\000\000\000\000\000\000\000\000\000\066\000\
\000\000\000\000\000\000\000\000\066\000\000\000\066\000\000\000\
\066\000\066\000\000\000\000\000\000\000\000\000\000\000\066\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\066\000\000\000\
\000\000\066\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\066\000\066\000\067\000\067\000\000\000\067\000\000\000\
\067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
\067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
\067\000\000\000\000\000\000\000\000\000\000\000\067\000\067\000\
\067\000\000\000\000\000\000\000\000\000\067\000\000\000\000\000\
\000\000\000\000\067\000\000\000\067\000\000\000\067\000\067\000\
\000\000\000\000\000\000\000\000\000\000\067\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\067\000\000\000\000\000\067\000\
\067\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\067\000\068\000\068\000\000\000\068\000\000\000\068\000\068\000\
\068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
\068\000\068\000\068\000\068\000\068\000\068\000\068\000\000\000\
\000\000\000\000\000\000\000\000\068\000\068\000\068\000\000\000\
\000\000\000\000\000\000\068\000\000\000\000\000\000\000\000\000\
\068\000\000\000\068\000\000\000\068\000\068\000\000\000\070\000\
\070\000\000\000\070\000\068\000\070\000\070\000\070\000\070\000\
\070\000\070\000\070\000\070\000\070\000\070\000\000\000\000\000\
\070\000\070\000\068\000\000\000\070\000\068\000\068\000\000\000\
\000\000\000\000\070\000\070\000\070\000\068\000\068\000\000\000\
\000\000\070\000\000\000\000\000\000\000\000\000\070\000\000\000\
\070\000\000\000\070\000\070\000\000\000\071\000\071\000\000\000\
\071\000\070\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\000\000\000\000\071\000\071\000\
\070\000\000\000\071\000\070\000\070\000\000\000\000\000\000\000\
\071\000\071\000\071\000\070\000\070\000\000\000\000\000\071\000\
\000\000\000\000\000\000\000\000\071\000\000\000\071\000\000\000\
\071\000\071\000\000\000\072\000\072\000\000\000\072\000\071\000\
\072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\000\000\000\000\072\000\072\000\071\000\000\000\
\072\000\071\000\071\000\000\000\000\000\000\000\072\000\072\000\
\072\000\071\000\071\000\000\000\000\000\072\000\000\000\000\000\
\000\000\000\000\072\000\000\000\072\000\000\000\072\000\072\000\
\000\000\073\000\073\000\000\000\073\000\072\000\073\000\073\000\
\073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
\000\000\000\000\073\000\073\000\072\000\000\000\073\000\072\000\
\072\000\000\000\000\000\000\000\073\000\073\000\073\000\072\000\
\072\000\000\000\000\000\073\000\000\000\000\000\000\000\000\000\
\073\000\000\000\073\000\000\000\073\000\073\000\000\000\074\000\
\074\000\000\000\074\000\073\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\000\000\000\000\000\000\000\000\
\000\000\000\000\073\000\000\000\074\000\073\000\073\000\000\000\
\000\000\000\000\074\000\074\000\074\000\073\000\073\000\000\000\
\000\000\074\000\000\000\000\000\000\000\000\000\074\000\000\000\
\074\000\000\000\074\000\074\000\000\000\075\000\075\000\000\000\
\075\000\074\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\000\000\000\000\000\000\000\000\000\000\000\000\
\074\000\000\000\075\000\074\000\074\000\000\000\000\000\000\000\
\075\000\075\000\075\000\074\000\074\000\000\000\000\000\075\000\
\000\000\000\000\000\000\000\000\075\000\000\000\075\000\000\000\
\075\000\075\000\000\000\076\000\076\000\000\000\076\000\075\000\
\076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
\000\000\000\000\000\000\000\000\000\000\000\000\075\000\000\000\
\076\000\075\000\075\000\000\000\000\000\000\000\076\000\076\000\
\076\000\075\000\075\000\000\000\000\000\076\000\000\000\000\000\
\000\000\000\000\076\000\000\000\076\000\000\000\076\000\076\000\
\000\000\077\000\077\000\000\000\077\000\076\000\077\000\077\000\
\077\000\077\000\077\000\077\000\077\000\077\000\000\000\000\000\
\000\000\000\000\000\000\000\000\076\000\000\000\077\000\076\000\
\076\000\000\000\000\000\000\000\077\000\077\000\077\000\076\000\
\076\000\000\000\000\000\077\000\000\000\000\000\000\000\000\000\
\077\000\000\000\077\000\000\000\077\000\077\000\000\000\078\000\
\078\000\000\000\078\000\077\000\078\000\078\000\078\000\078\000\
\078\000\078\000\078\000\078\000\000\000\000\000\000\000\000\000\
\000\000\000\000\077\000\000\000\078\000\077\000\077\000\000\000\
\000\000\000\000\078\000\078\000\078\000\077\000\077\000\000\000\
\000\000\078\000\000\000\000\000\000\000\000\000\078\000\000\000\
\078\000\000\000\078\000\078\000\000\000\079\000\079\000\000\000\
\079\000\078\000\079\000\079\000\079\000\079\000\079\000\079\000\
\079\000\079\000\000\000\000\000\000\000\000\000\000\000\000\000\
\078\000\000\000\079\000\078\000\078\000\000\000\000\000\000\000\
\079\000\079\000\079\000\078\000\078\000\000\000\000\000\079\000\
\000\000\000\000\000\000\000\000\079\000\000\000\079\000\000\000\
\079\000\079\000\000\000\080\000\080\000\000\000\080\000\079\000\
\080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
\000\000\000\000\000\000\000\000\000\000\000\000\079\000\000\000\
\080\000\079\000\079\000\000\000\000\000\000\000\080\000\080\000\
\080\000\079\000\079\000\000\000\000\000\080\000\000\000\000\000\
\000\000\000\000\080\000\000\000\080\000\000\000\080\000\080\000\
\000\000\081\000\081\000\000\000\081\000\080\000\081\000\081\000\
\081\000\081\000\081\000\081\000\081\000\081\000\000\000\000\000\
\000\000\000\000\000\000\000\000\080\000\000\000\081\000\080\000\
\080\000\000\000\000\000\000\000\081\000\081\000\081\000\080\000\
\080\000\000\000\000\000\081\000\000\000\000\000\000\000\000\000\
\081\000\000\000\081\000\000\000\081\000\081\000\000\000\082\000\
\082\000\000\000\082\000\081\000\082\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\081\000\000\000\082\000\081\000\081\000\000\000\
\000\000\000\000\082\000\082\000\082\000\081\000\081\000\000\000\
\000\000\082\000\000\000\000\000\000\000\000\000\082\000\000\000\
\082\000\000\000\082\000\082\000\000\000\085\000\085\000\000\000\
\085\000\082\000\085\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\082\000\000\000\085\000\082\000\082\000\000\000\000\000\000\000\
\085\000\085\000\085\000\082\000\082\000\000\000\000\000\085\000\
\000\000\000\000\000\000\000\000\085\000\000\000\085\000\000\000\
\085\000\085\000\000\000\083\000\083\000\000\000\083\000\085\000\
\083\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\085\000\000\000\
\083\000\085\000\085\000\000\000\000\000\000\000\083\000\083\000\
\083\000\085\000\085\000\000\000\000\000\083\000\000\000\000\000\
\000\000\000\000\083\000\000\000\083\000\000\000\083\000\083\000\
\000\000\084\000\084\000\000\000\084\000\083\000\084\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\083\000\000\000\084\000\083\000\
\083\000\000\000\000\000\000\000\084\000\084\000\084\000\083\000\
\083\000\000\000\000\000\084\000\000\000\000\000\000\000\000\000\
\084\000\000\000\084\000\000\000\084\000\084\000\000\000\086\000\
\086\000\000\000\086\000\084\000\086\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\084\000\000\000\086\000\084\000\084\000\000\000\
\000\000\000\000\086\000\086\000\086\000\084\000\084\000\000\000\
\000\000\086\000\000\000\000\000\000\000\000\000\086\000\000\000\
\086\000\000\000\086\000\086\000\000\000\087\000\087\000\000\000\
\087\000\086\000\087\000\000\000\000\000\088\000\088\000\000\000\
\088\000\000\000\088\000\000\000\000\000\000\000\000\000\000\000\
\086\000\000\000\087\000\000\000\000\000\000\000\000\000\000\000\
\087\000\087\000\087\000\086\000\086\000\000\000\000\000\087\000\
\088\000\088\000\088\000\000\000\087\000\000\000\087\000\088\000\
\087\000\087\000\000\000\000\000\088\000\000\000\088\000\087\000\
\088\000\088\000\000\000\132\000\132\000\000\000\132\000\088\000\
\132\000\008\000\000\000\009\000\000\000\000\000\087\000\010\000\
\011\000\000\000\012\000\013\000\014\000\000\000\088\000\000\000\
\000\000\087\000\087\000\000\000\000\000\000\000\132\000\132\000\
\132\000\088\000\088\000\000\000\000\000\132\000\000\000\000\000\
\000\000\000\000\132\000\000\000\132\000\000\000\132\000\132\000\
\000\000\024\000\025\000\000\000\000\000\132\000\027\000\028\000\
\029\000\000\000\030\000\068\000\000\000\033\000\000\000\000\000\
\000\000\000\000\000\000\000\000\132\000\000\000\071\000\000\000\
\004\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\
\132\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\000\000\081\000\082\000\007\000\000\000\008\000\083\000\
\009\000\000\000\000\000\000\000\010\000\011\000\000\000\012\000\
\013\000\014\000\015\000\000\000\016\000\000\000\000\000\000\000\
\000\000\084\000\000\000\017\000\000\000\018\000\000\000\000\000\
\000\000\000\000\000\000\019\000\020\000\021\000\000\000\000\000\
\000\000\022\000\000\000\000\000\000\000\000\000\024\000\025\000\
\000\000\000\000\026\000\085\000\028\000\029\000\000\000\030\000\
\086\000\032\000\033\000\003\000\000\000\004\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\
\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\
\000\000\007\000\000\000\008\000\000\000\009\000\000\000\000\000\
\000\000\010\000\011\000\000\000\012\000\013\000\014\000\015\000\
\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\
\017\000\000\000\018\000\000\000\000\000\000\000\000\000\000\000\
\019\000\020\000\021\000\000\000\000\000\000\000\022\000\000\000\
\000\000\023\000\000\000\024\000\025\000\000\000\000\000\026\000\
\027\000\028\000\029\000\000\000\030\000\031\000\032\000\033\000\
\071\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\
\006\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\
\008\000\000\000\009\000\000\000\000\000\000\000\010\000\011\000\
\097\000\012\000\013\000\014\000\015\000\000\000\016\000\000\000\
\000\000\000\000\000\000\000\000\000\000\017\000\000\000\018\000\
\000\000\000\000\000\000\000\000\000\000\019\000\020\000\021\000\
\000\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\
\024\000\025\000\000\000\000\000\026\000\027\000\028\000\029\000\
\000\000\030\000\068\000\032\000\033\000\071\000\000\000\004\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\
\000\000\000\000\000\000\007\000\000\000\008\000\000\000\009\000\
\000\000\000\000\000\000\010\000\011\000\099\000\012\000\013\000\
\014\000\015\000\000\000\016\000\000\000\000\000\000\000\000\000\
\000\000\000\000\017\000\000\000\018\000\000\000\000\000\000\000\
\000\000\000\000\019\000\020\000\021\000\000\000\000\000\000\000\
\022\000\000\000\000\000\000\000\000\000\024\000\025\000\000\000\
\000\000\026\000\027\000\028\000\029\000\000\000\030\000\068\000\
\032\000\033\000\071\000\000\000\004\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\005\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\007\000\000\000\008\000\000\000\009\000\000\000\000\000\000\000\
\010\000\011\000\101\000\012\000\013\000\014\000\015\000\000\000\
\016\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
\000\000\018\000\000\000\000\000\000\000\000\000\000\000\019\000\
\020\000\021\000\000\000\000\000\000\000\022\000\000\000\000\000\
\000\000\000\000\024\000\025\000\000\000\000\000\026\000\027\000\
\028\000\029\000\000\000\030\000\068\000\032\000\033\000\071\000\
\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\
\000\000\000\000\000\000\000\000\000\000\007\000\000\000\008\000\
\199\000\009\000\000\000\000\000\000\000\010\000\011\000\000\000\
\012\000\013\000\014\000\015\000\000\000\016\000\000\000\000\000\
\000\000\000\000\000\000\000\000\017\000\000\000\018\000\000\000\
\000\000\000\000\000\000\000\000\019\000\020\000\021\000\000\000\
\000\000\000\000\022\000\000\000\000\000\000\000\000\000\024\000\
\025\000\000\000\000\000\026\000\027\000\028\000\029\000\000\000\
\030\000\068\000\032\000\033\000\071\000\013\001\004\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\
\000\000\000\000\007\000\000\000\008\000\000\000\009\000\000\000\
\000\000\000\000\010\000\011\000\000\000\012\000\013\000\014\000\
\015\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\
\000\000\017\000\000\000\018\000\000\000\000\000\000\000\000\000\
\000\000\019\000\020\000\021\000\000\000\000\000\000\000\022\000\
\000\000\000\000\000\000\000\000\024\000\025\000\000\000\000\000\
\026\000\027\000\028\000\029\000\000\000\030\000\068\000\032\000\
\033\000\140\000\000\000\140\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\140\000\000\000\000\000\
\000\000\140\000\000\000\000\000\000\000\000\000\000\000\140\000\
\000\000\140\000\000\000\140\000\147\000\000\000\000\000\140\000\
\140\000\000\000\140\000\140\000\140\000\140\000\000\000\140\000\
\000\000\000\000\000\000\000\000\000\000\000\000\140\000\000\000\
\140\000\000\000\000\000\000\000\000\000\000\000\140\000\140\000\
\140\000\000\000\000\000\000\000\140\000\000\000\000\000\000\000\
\000\000\140\000\140\000\000\000\000\000\140\000\140\000\140\000\
\140\000\000\000\140\000\140\000\140\000\140\000\071\000\000\000\
\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\
\000\000\000\000\000\000\000\000\007\000\000\000\008\000\000\000\
\009\000\000\000\000\000\000\000\010\000\011\000\000\000\012\000\
\013\000\014\000\015\000\000\000\016\000\000\000\000\000\000\000\
\000\000\000\000\000\000\017\000\000\000\018\000\000\000\000\000\
\000\000\000\000\000\000\019\000\020\000\021\000\000\000\000\000\
\000\000\022\000\000\000\000\000\000\000\000\000\024\000\025\000\
\000\000\000\000\026\000\027\000\028\000\029\000\000\000\030\000\
\068\000\032\000\033\000\092\000\000\000\004\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\
\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\
\000\000\007\000\000\000\008\000\000\000\009\000\000\000\000\000\
\000\000\010\000\011\000\000\000\012\000\013\000\014\000\015\000\
\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\
\017\000\000\000\018\000\000\000\000\000\000\000\000\000\000\000\
\019\000\020\000\021\000\000\000\000\000\000\000\022\000\000\000\
\000\000\000\000\000\000\024\000\025\000\000\000\000\000\026\000\
\027\000\028\000\029\000\000\000\030\000\068\000\032\000\033\000\
\030\000\030\000\000\000\030\000\000\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\000\000\000\000\000\000\030\000\030\000\030\000\000\000\000\000\
\000\000\000\000\030\000\000\000\000\000\000\000\000\000\030\000\
\000\000\030\000\000\000\030\000\030\000\000\000\000\000\000\000\
\000\000\000\000\030\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\162\000\030\000\000\000\000\000\030\000\030\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\000\000\000\000\012\000\012\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\161\000\000\000\000\000\012\000\000\000\012\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\000\000\000\000\018\000\018\000\012\000\012\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\011\000\000\000\000\000\018\000\000\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\000\000\000\000\018\000\000\000\018\000\018\000\005\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\000\000\000\009\000\018\000\000\000\000\000\
\010\000\011\000\000\000\012\000\013\000\014\000\000\000\000\000\
\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\
\000\000\018\000\000\000\000\000\018\000\018\000\008\000\000\000\
\009\000\000\000\000\000\000\000\010\000\011\000\000\000\012\000\
\013\000\014\000\024\000\025\000\000\000\000\000\026\000\027\000\
\028\000\029\000\000\000\030\000\068\000\032\000\033\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\024\000\025\000\
\000\000\000\000\000\000\027\000\028\000\029\000\000\000\030\000\
\068\000\032\000\033\000"

let yycheck = "\001\000\
\064\000\015\000\026\000\003\000\171\000\007\000\063\000\009\000\
\005\001\066\000\134\000\135\000\031\001\015\000\016\000\010\000\
\011\000\012\000\005\000\006\000\028\001\194\000\123\000\196\000\
\003\001\031\001\045\001\029\001\078\001\005\001\029\001\005\001\
\030\001\073\001\084\001\037\000\028\001\036\001\078\001\001\000\
\002\001\003\001\031\001\005\001\046\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\029\001\
\053\001\019\001\020\001\123\000\036\001\023\001\186\000\063\000\
\043\001\067\000\066\000\029\001\030\001\031\001\078\001\071\000\
\078\001\244\000\036\001\246\000\247\000\248\000\076\001\041\001\
\030\001\043\001\080\001\045\001\046\001\016\001\078\001\074\000\
\030\001\078\001\052\001\078\000\092\000\194\000\096\000\196\000\
\030\001\028\001\036\001\030\001\011\001\103\000\104\000\034\001\
\035\001\067\001\037\001\030\001\070\001\071\001\167\000\075\001\
\002\001\005\001\064\001\065\001\078\001\079\001\005\001\034\001\
\144\000\145\000\146\000\147\000\148\000\149\000\150\000\028\001\
\030\001\028\001\194\000\033\001\196\000\029\001\076\001\064\001\
\065\001\132\000\080\001\081\001\078\001\031\001\076\001\058\001\
\036\001\028\001\080\001\081\001\047\001\036\001\046\001\028\001\
\075\001\084\001\085\001\086\001\087\001\088\001\024\001\025\001\
\224\000\050\001\075\001\165\000\166\000\054\001\161\000\167\000\
\170\000\073\001\234\000\055\001\056\001\075\001\078\001\028\001\
\178\000\179\000\180\000\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\188\000\028\001\050\001\030\001\151\000\152\000\
\001\001\034\001\035\001\004\001\037\001\006\001\078\001\007\001\
\017\001\018\001\082\001\083\001\021\001\022\001\062\001\016\001\
\078\001\015\001\016\001\020\001\226\000\019\001\020\001\070\001\
\071\001\026\001\078\001\028\001\001\001\030\001\080\001\225\000\
\226\000\034\001\035\001\067\001\037\001\038\001\039\001\040\001\
\023\001\042\001\078\001\043\001\044\001\030\001\082\001\083\001\
\049\001\028\001\051\001\084\001\085\001\086\001\087\001\088\001\
\057\001\058\001\059\001\043\001\044\001\255\000\063\001\097\001\
\098\001\066\001\030\001\068\001\069\001\045\001\029\001\072\001\
\073\001\074\001\075\001\013\001\077\001\078\001\079\001\080\001\
\029\001\002\001\028\001\002\001\036\001\067\001\024\001\025\001\
\034\001\035\001\041\001\037\001\038\001\039\001\036\001\036\001\
\029\001\052\001\031\001\052\001\038\001\039\001\028\001\036\001\
\136\000\137\000\138\000\139\000\075\001\003\001\028\001\049\001\
\045\001\051\001\052\001\002\001\002\001\050\001\002\001\029\001\
\053\001\054\001\068\001\069\001\029\001\079\001\029\001\073\001\
\074\001\075\001\031\001\077\001\078\001\079\001\080\001\140\000\
\141\000\142\000\143\000\029\001\029\001\045\001\080\001\081\001\
\078\001\075\001\075\001\075\001\029\001\081\001\032\001\089\001\
\090\001\002\001\003\001\029\001\005\001\045\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\031\001\003\001\028\001\029\001\030\001\031\001\005\001\
\067\001\045\001\045\001\036\001\067\001\067\001\081\001\067\001\
\041\001\007\001\043\001\005\001\045\001\046\001\047\001\005\001\
\031\001\048\001\031\001\052\001\045\001\029\001\054\001\033\001\
\005\001\037\001\050\001\029\001\029\001\048\001\060\001\036\001\
\061\001\061\001\067\001\001\001\078\001\070\001\071\001\030\001\
\029\001\045\001\045\001\029\001\081\001\078\001\079\001\002\001\
\003\001\031\001\005\001\050\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\033\001\
\033\001\036\001\029\001\030\001\031\001\036\001\037\000\154\000\
\032\000\036\001\032\000\020\001\133\000\153\000\041\001\035\000\
\043\001\126\000\045\001\046\001\228\000\096\000\255\255\060\001\
\255\255\052\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\067\001\255\255\255\255\070\001\071\001\255\255\255\255\255\255\
\255\255\255\255\255\255\078\001\079\001\002\001\003\001\255\255\
\005\001\255\255\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\255\255\255\255\255\255\
\029\001\030\001\031\001\255\255\255\255\255\255\255\255\036\001\
\255\255\255\255\255\255\255\255\041\001\255\255\043\001\255\255\
\045\001\046\001\255\255\255\255\255\255\255\255\255\255\052\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\067\001\255\255\
\255\255\070\001\071\001\255\255\255\255\255\255\255\255\255\255\
\255\255\078\001\079\001\002\001\003\001\255\255\005\001\255\255\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\255\255\255\255\255\255\029\001\030\001\
\031\001\255\255\255\255\255\255\255\255\036\001\255\255\255\255\
\255\255\255\255\041\001\255\255\043\001\255\255\045\001\046\001\
\255\255\255\255\255\255\255\255\255\255\052\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\067\001\255\255\255\255\070\001\
\071\001\255\255\255\255\255\255\255\255\255\255\255\255\078\001\
\079\001\002\001\003\001\255\255\005\001\255\255\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\255\255\255\255\255\255\255\255\029\001\030\001\031\001\255\255\
\255\255\255\255\255\255\036\001\255\255\255\255\255\255\255\255\
\041\001\255\255\043\001\255\255\045\001\046\001\255\255\255\255\
\255\255\255\255\255\255\052\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\067\001\255\255\255\255\070\001\071\001\255\255\
\255\255\255\255\255\255\255\255\255\255\078\001\079\001\002\001\
\003\001\255\255\005\001\255\255\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\255\255\255\255\
\255\255\255\255\029\001\030\001\031\001\255\255\255\255\255\255\
\255\255\036\001\255\255\255\255\255\255\255\255\041\001\255\255\
\043\001\255\255\045\001\046\001\255\255\255\255\255\255\255\255\
\255\255\052\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\067\001\255\255\255\255\070\001\071\001\255\255\255\255\255\255\
\255\255\255\255\255\255\078\001\079\001\002\001\003\001\255\255\
\005\001\255\255\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\255\255\255\255\255\255\255\255\
\029\001\030\001\031\001\255\255\255\255\255\255\255\255\036\001\
\255\255\255\255\255\255\255\255\041\001\255\255\043\001\255\255\
\045\001\046\001\255\255\255\255\255\255\255\255\255\255\052\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\067\001\255\255\
\255\255\070\001\071\001\255\255\255\255\255\255\255\255\255\255\
\255\255\078\001\079\001\002\001\003\001\255\255\005\001\255\255\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\029\001\030\001\
\031\001\255\255\255\255\255\255\255\255\036\001\255\255\255\255\
\255\255\255\255\041\001\255\255\043\001\255\255\045\001\046\001\
\255\255\255\255\255\255\255\255\255\255\052\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\067\001\255\255\255\255\070\001\
\071\001\255\255\255\255\255\255\255\255\255\255\255\255\078\001\
\079\001\002\001\003\001\255\255\005\001\255\255\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\255\255\255\255\255\255\255\255\029\001\030\001\031\001\255\255\
\255\255\255\255\255\255\036\001\255\255\255\255\255\255\255\255\
\041\001\255\255\043\001\255\255\045\001\046\001\255\255\002\001\
\003\001\255\255\005\001\052\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\255\255\
\019\001\020\001\067\001\255\255\023\001\070\001\071\001\255\255\
\255\255\255\255\029\001\030\001\031\001\078\001\079\001\255\255\
\255\255\036\001\255\255\255\255\255\255\255\255\041\001\255\255\
\043\001\255\255\045\001\046\001\255\255\002\001\003\001\255\255\
\005\001\052\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\255\255\255\255\019\001\020\001\
\067\001\255\255\023\001\070\001\071\001\255\255\255\255\255\255\
\029\001\030\001\031\001\078\001\079\001\255\255\255\255\036\001\
\255\255\255\255\255\255\255\255\041\001\255\255\043\001\255\255\
\045\001\046\001\255\255\002\001\003\001\255\255\005\001\052\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\255\255\255\255\019\001\020\001\067\001\255\255\
\023\001\070\001\071\001\255\255\255\255\255\255\029\001\030\001\
\031\001\078\001\079\001\255\255\255\255\036\001\255\255\255\255\
\255\255\255\255\041\001\255\255\043\001\255\255\045\001\046\001\
\255\255\002\001\003\001\255\255\005\001\052\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\255\255\019\001\020\001\067\001\255\255\023\001\070\001\
\071\001\255\255\255\255\255\255\029\001\030\001\031\001\078\001\
\079\001\255\255\255\255\036\001\255\255\255\255\255\255\255\255\
\041\001\255\255\043\001\255\255\045\001\046\001\255\255\002\001\
\003\001\255\255\005\001\052\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\067\001\255\255\023\001\070\001\071\001\255\255\
\255\255\255\255\029\001\030\001\031\001\078\001\079\001\255\255\
\255\255\036\001\255\255\255\255\255\255\255\255\041\001\255\255\
\043\001\255\255\045\001\046\001\255\255\002\001\003\001\255\255\
\005\001\052\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\255\255\255\255\255\255\255\255\255\255\
\067\001\255\255\023\001\070\001\071\001\255\255\255\255\255\255\
\029\001\030\001\031\001\078\001\079\001\255\255\255\255\036\001\
\255\255\255\255\255\255\255\255\041\001\255\255\043\001\255\255\
\045\001\046\001\255\255\002\001\003\001\255\255\005\001\052\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\067\001\255\255\
\023\001\070\001\071\001\255\255\255\255\255\255\029\001\030\001\
\031\001\078\001\079\001\255\255\255\255\036\001\255\255\255\255\
\255\255\255\255\041\001\255\255\043\001\255\255\045\001\046\001\
\255\255\002\001\003\001\255\255\005\001\052\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\255\255\
\255\255\255\255\255\255\255\255\067\001\255\255\023\001\070\001\
\071\001\255\255\255\255\255\255\029\001\030\001\031\001\078\001\
\079\001\255\255\255\255\036\001\255\255\255\255\255\255\255\255\
\041\001\255\255\043\001\255\255\045\001\046\001\255\255\002\001\
\003\001\255\255\005\001\052\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\067\001\255\255\023\001\070\001\071\001\255\255\
\255\255\255\255\029\001\030\001\031\001\078\001\079\001\255\255\
\255\255\036\001\255\255\255\255\255\255\255\255\041\001\255\255\
\043\001\255\255\045\001\046\001\255\255\002\001\003\001\255\255\
\005\001\052\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\255\255\255\255\255\255\255\255\255\255\
\067\001\255\255\023\001\070\001\071\001\255\255\255\255\255\255\
\029\001\030\001\031\001\078\001\079\001\255\255\255\255\036\001\
\255\255\255\255\255\255\255\255\041\001\255\255\043\001\255\255\
\045\001\046\001\255\255\002\001\003\001\255\255\005\001\052\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\067\001\255\255\
\023\001\070\001\071\001\255\255\255\255\255\255\029\001\030\001\
\031\001\078\001\079\001\255\255\255\255\036\001\255\255\255\255\
\255\255\255\255\041\001\255\255\043\001\255\255\045\001\046\001\
\255\255\002\001\003\001\255\255\005\001\052\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\255\255\
\255\255\255\255\255\255\255\255\067\001\255\255\023\001\070\001\
\071\001\255\255\255\255\255\255\029\001\030\001\031\001\078\001\
\079\001\255\255\255\255\036\001\255\255\255\255\255\255\255\255\
\041\001\255\255\043\001\255\255\045\001\046\001\255\255\002\001\
\003\001\255\255\005\001\052\001\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\067\001\255\255\023\001\070\001\071\001\255\255\
\255\255\255\255\029\001\030\001\031\001\078\001\079\001\255\255\
\255\255\036\001\255\255\255\255\255\255\255\255\041\001\255\255\
\043\001\255\255\045\001\046\001\255\255\002\001\003\001\255\255\
\005\001\052\001\007\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\067\001\255\255\023\001\070\001\071\001\255\255\255\255\255\255\
\029\001\030\001\031\001\078\001\079\001\255\255\255\255\036\001\
\255\255\255\255\255\255\255\255\041\001\255\255\043\001\255\255\
\045\001\046\001\255\255\002\001\003\001\255\255\005\001\052\001\
\007\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\067\001\255\255\
\023\001\070\001\071\001\255\255\255\255\255\255\029\001\030\001\
\031\001\078\001\079\001\255\255\255\255\036\001\255\255\255\255\
\255\255\255\255\041\001\255\255\043\001\255\255\045\001\046\001\
\255\255\002\001\003\001\255\255\005\001\052\001\007\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\067\001\255\255\023\001\070\001\
\071\001\255\255\255\255\255\255\029\001\030\001\031\001\078\001\
\079\001\255\255\255\255\036\001\255\255\255\255\255\255\255\255\
\041\001\255\255\043\001\255\255\045\001\046\001\255\255\002\001\
\003\001\255\255\005\001\052\001\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\067\001\255\255\023\001\070\001\071\001\255\255\
\255\255\255\255\029\001\030\001\031\001\078\001\079\001\255\255\
\255\255\036\001\255\255\255\255\255\255\255\255\041\001\255\255\
\043\001\255\255\045\001\046\001\255\255\002\001\003\001\255\255\
\005\001\052\001\007\001\255\255\255\255\002\001\003\001\255\255\
\005\001\255\255\007\001\255\255\255\255\255\255\255\255\255\255\
\067\001\255\255\023\001\255\255\255\255\255\255\255\255\255\255\
\029\001\030\001\031\001\078\001\079\001\255\255\255\255\036\001\
\029\001\030\001\031\001\255\255\041\001\255\255\043\001\036\001\
\045\001\046\001\255\255\255\255\041\001\255\255\043\001\052\001\
\045\001\046\001\255\255\002\001\003\001\255\255\005\001\052\001\
\007\001\028\001\255\255\030\001\255\255\255\255\067\001\034\001\
\035\001\255\255\037\001\038\001\039\001\255\255\067\001\255\255\
\255\255\078\001\079\001\255\255\255\255\255\255\029\001\030\001\
\031\001\078\001\079\001\255\255\255\255\036\001\255\255\255\255\
\255\255\255\255\041\001\255\255\043\001\255\255\045\001\046\001\
\255\255\068\001\069\001\255\255\255\255\052\001\073\001\074\001\
\075\001\255\255\077\001\078\001\255\255\080\001\255\255\255\255\
\255\255\255\255\255\255\255\255\067\001\255\255\004\001\255\255\
\006\001\255\255\255\255\255\255\255\255\255\255\255\255\078\001\
\079\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\024\001\025\001\026\001\255\255\028\001\029\001\
\030\001\255\255\255\255\255\255\034\001\035\001\255\255\037\001\
\038\001\039\001\040\001\255\255\042\001\255\255\255\255\255\255\
\255\255\047\001\255\255\049\001\255\255\051\001\255\255\255\255\
\255\255\255\255\255\255\057\001\058\001\059\001\255\255\255\255\
\255\255\063\001\255\255\255\255\255\255\255\255\068\001\069\001\
\255\255\255\255\072\001\073\001\074\001\075\001\255\255\077\001\
\078\001\079\001\080\001\004\001\255\255\006\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\016\001\
\255\255\255\255\255\255\020\001\255\255\255\255\255\255\255\255\
\255\255\026\001\255\255\028\001\255\255\030\001\255\255\255\255\
\255\255\034\001\035\001\255\255\037\001\038\001\039\001\040\001\
\255\255\042\001\255\255\255\255\255\255\255\255\255\255\255\255\
\049\001\255\255\051\001\255\255\255\255\255\255\255\255\255\255\
\057\001\058\001\059\001\255\255\255\255\255\255\063\001\255\255\
\255\255\066\001\255\255\068\001\069\001\255\255\255\255\072\001\
\073\001\074\001\075\001\255\255\077\001\078\001\079\001\080\001\
\004\001\255\255\006\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\016\001\255\255\255\255\255\255\
\020\001\255\255\255\255\255\255\255\255\255\255\026\001\255\255\
\028\001\255\255\030\001\255\255\255\255\255\255\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\255\255\042\001\255\255\
\255\255\255\255\255\255\255\255\255\255\049\001\255\255\051\001\
\255\255\255\255\255\255\255\255\255\255\057\001\058\001\059\001\
\255\255\255\255\255\255\063\001\255\255\255\255\255\255\255\255\
\068\001\069\001\255\255\255\255\072\001\073\001\074\001\075\001\
\255\255\077\001\078\001\079\001\080\001\004\001\255\255\006\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\016\001\255\255\255\255\255\255\020\001\255\255\255\255\
\255\255\255\255\255\255\026\001\255\255\028\001\255\255\030\001\
\255\255\255\255\255\255\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\255\255\042\001\255\255\255\255\255\255\255\255\
\255\255\255\255\049\001\255\255\051\001\255\255\255\255\255\255\
\255\255\255\255\057\001\058\001\059\001\255\255\255\255\255\255\
\063\001\255\255\255\255\255\255\255\255\068\001\069\001\255\255\
\255\255\072\001\073\001\074\001\075\001\255\255\077\001\078\001\
\079\001\080\001\004\001\255\255\006\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\016\001\255\255\
\255\255\255\255\020\001\255\255\255\255\255\255\255\255\255\255\
\026\001\255\255\028\001\255\255\030\001\255\255\255\255\255\255\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\255\255\
\042\001\255\255\255\255\255\255\255\255\255\255\255\255\049\001\
\255\255\051\001\255\255\255\255\255\255\255\255\255\255\057\001\
\058\001\059\001\255\255\255\255\255\255\063\001\255\255\255\255\
\255\255\255\255\068\001\069\001\255\255\255\255\072\001\073\001\
\074\001\075\001\255\255\077\001\078\001\079\001\080\001\004\001\
\255\255\006\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\016\001\255\255\255\255\255\255\020\001\
\255\255\255\255\255\255\255\255\255\255\026\001\255\255\028\001\
\029\001\030\001\255\255\255\255\255\255\034\001\035\001\255\255\
\037\001\038\001\039\001\040\001\255\255\042\001\255\255\255\255\
\255\255\255\255\255\255\255\255\049\001\255\255\051\001\255\255\
\255\255\255\255\255\255\255\255\057\001\058\001\059\001\255\255\
\255\255\255\255\063\001\255\255\255\255\255\255\255\255\068\001\
\069\001\255\255\255\255\072\001\073\001\074\001\075\001\255\255\
\077\001\078\001\079\001\080\001\004\001\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\016\001\255\255\255\255\255\255\020\001\255\255\255\255\255\255\
\255\255\255\255\026\001\255\255\028\001\255\255\030\001\255\255\
\255\255\255\255\034\001\035\001\255\255\037\001\038\001\039\001\
\040\001\255\255\042\001\255\255\255\255\255\255\255\255\255\255\
\255\255\049\001\255\255\051\001\255\255\255\255\255\255\255\255\
\255\255\057\001\058\001\059\001\255\255\255\255\255\255\063\001\
\255\255\255\255\255\255\255\255\068\001\069\001\255\255\255\255\
\072\001\073\001\074\001\075\001\255\255\077\001\078\001\079\001\
\080\001\004\001\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\016\001\255\255\255\255\
\255\255\020\001\255\255\255\255\255\255\255\255\255\255\026\001\
\255\255\028\001\255\255\030\001\031\001\255\255\255\255\034\001\
\035\001\255\255\037\001\038\001\039\001\040\001\255\255\042\001\
\255\255\255\255\255\255\255\255\255\255\255\255\049\001\255\255\
\051\001\255\255\255\255\255\255\255\255\255\255\057\001\058\001\
\059\001\255\255\255\255\255\255\063\001\255\255\255\255\255\255\
\255\255\068\001\069\001\255\255\255\255\072\001\073\001\074\001\
\075\001\255\255\077\001\078\001\079\001\080\001\004\001\255\255\
\006\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\016\001\255\255\255\255\255\255\020\001\255\255\
\255\255\255\255\255\255\255\255\026\001\255\255\028\001\255\255\
\030\001\255\255\255\255\255\255\034\001\035\001\255\255\037\001\
\038\001\039\001\040\001\255\255\042\001\255\255\255\255\255\255\
\255\255\255\255\255\255\049\001\255\255\051\001\255\255\255\255\
\255\255\255\255\255\255\057\001\058\001\059\001\255\255\255\255\
\255\255\063\001\255\255\255\255\255\255\255\255\068\001\069\001\
\255\255\255\255\072\001\073\001\074\001\075\001\255\255\077\001\
\078\001\079\001\080\001\004\001\255\255\006\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\016\001\
\255\255\255\255\255\255\020\001\255\255\255\255\255\255\255\255\
\255\255\026\001\255\255\028\001\255\255\030\001\255\255\255\255\
\255\255\034\001\035\001\255\255\037\001\038\001\039\001\040\001\
\255\255\042\001\255\255\255\255\255\255\255\255\255\255\255\255\
\049\001\255\255\051\001\255\255\255\255\255\255\255\255\255\255\
\057\001\058\001\059\001\255\255\255\255\255\255\063\001\255\255\
\255\255\255\255\255\255\068\001\069\001\255\255\255\255\072\001\
\073\001\074\001\075\001\255\255\077\001\078\001\079\001\080\001\
\002\001\003\001\255\255\005\001\255\255\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\255\255\029\001\030\001\031\001\255\255\255\255\
\255\255\255\255\036\001\255\255\255\255\255\255\255\255\041\001\
\255\255\043\001\255\255\045\001\046\001\255\255\255\255\255\255\
\255\255\255\255\052\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\002\001\067\001\255\255\255\255\070\001\071\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\028\001\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\002\001\255\255\255\255\045\001\255\255\047\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\028\001\029\001\070\001\071\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\002\001\255\255\255\255\045\001\255\255\047\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\028\001\255\255\070\001\071\001\016\001\255\255\
\255\255\255\255\020\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\028\001\255\255\030\001\047\001\255\255\255\255\
\034\001\035\001\255\255\037\001\038\001\039\001\255\255\255\255\
\255\255\255\255\016\001\255\255\255\255\255\255\020\001\255\255\
\255\255\067\001\255\255\255\255\070\001\071\001\028\001\255\255\
\030\001\255\255\255\255\255\255\034\001\035\001\255\255\037\001\
\038\001\039\001\068\001\069\001\255\255\255\255\072\001\073\001\
\074\001\075\001\255\255\077\001\078\001\079\001\080\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\068\001\069\001\
\255\255\255\255\255\255\073\001\074\001\075\001\255\255\077\001\
\078\001\079\001\080\001"

let yynames_const = "\
  END\000\
  EQ\000\
  IN\000\
  FUN\000\
  RARROW\000\
  IF\000\
  ELSE\000\
  EQEQ\000\
  LESS\000\
  LESSEQUAL\000\
  MORE\000\
  MOREEQUAL\000\
  DIFFERENT\000\
  BEGINSWITH\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  SLASH\000\
  PLUSDOT\000\
  MINUSDOT\000\
  STARDOT\000\
  SLASHDOT\000\
  PLUSPLUS\000\
  HATHAT\000\
  HAT\000\
  SWITCH\000\
  RECEIVE\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LQUOTE\000\
  RQUOTE\000\
  LSET\000\
  LBAG\000\
  RBRACKET\000\
  LBRACKET\000\
  SORT_UP\000\
  SORT_DOWN\000\
  FOR\000\
  LARROW\000\
  HANDLE\000\
  WHERE\000\
  AMPER\000\
  COMMA\000\
  VBAR\000\
  DOT\000\
  COLON\000\
  TABLE\000\
  FROM\000\
  DATABASE\000\
  WITH\000\
  UNIQUE\000\
  ORDER\000\
  ASC\000\
  DESC\000\
  UPDATE\000\
  DELETE\000\
  INSERT\000\
  BY\000\
  VALUES\000\
  INTO\000\
  ESCAPE\000\
  CLIENT\000\
  SERVER\000\
  NAMESPACE\000\
  SEMICOLON\000\
  TRUE\000\
  FALSE\000\
  BARBAR\000\
  AMPAMP\000\
  NOT\000\
  RXML\000\
  SLASHRXML\000\
  TINT\000\
  TFLOAT\000\
  TBOOL\000\
  TSTRING\000\
  "

let yynames_block = "\
  UINTEGER\000\
  UFLOAT\000\
  STRING\000\
  CDATA\000\
  CHAR\000\
  VARIABLE\000\
  CONSTRUCTOR\000\
  LXML\000\
  ENDTAG\000\
  TVARIABLE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'toplevel_seq) in
    Obj.repr(
# 96 "sl_parser.mly"
                                                               ( _1 )
# 1297 "sl_parser.ml"
               : Sl_sugar.phrase list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'toplevel) in
    let _2 = (peek_val parser_env 0 : 'toplevel_seq) in
    Obj.repr(
# 99 "sl_parser.mly"
                                                               ( _1 :: _2 )
# 1305 "sl_parser.ml"
               : 'toplevel_seq))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'toplevel) in
    Obj.repr(
# 100 "sl_parser.mly"
                                                               ( [_1] )
# 1312 "sl_parser.ml"
               : 'toplevel_seq))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'exp) in
    Obj.repr(
# 103 "sl_parser.mly"
                                                               ( _1 )
# 1319 "sl_parser.ml"
               : 'toplevel))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'namespace_decl) in
    Obj.repr(
# 104 "sl_parser.mly"
                                                               ( _1 )
# 1326 "sl_parser.ml"
               : 'toplevel))
; (fun parser_env ->
    let _1 = (peek_val parser_env 4 : string) in
    let _2 = (peek_val parser_env 3 : 'perhaps_location) in
    let _4 = (peek_val parser_env 1 : 'exp) in
    Obj.repr(
# 105 "sl_parser.mly"
                                                               ( Definition (_1, _4, _2), pos() )
# 1335 "sl_parser.ml"
               : 'toplevel))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : string) in
    let _3 = (peek_val parser_env 3 : 'arg_list) in
    let _4 = (peek_val parser_env 2 : 'perhaps_location) in
    let _5 = (peek_val parser_env 1 : 'block) in
    let _6 = (peek_val parser_env 0 : 'perhaps_semi) in
    Obj.repr(
# 106 "sl_parser.mly"
                                                               ( Definition (_2, (FunLit (Some _2, _3, _5), pos()), _4), pos() )
# 1346 "sl_parser.ml"
               : 'toplevel))
; (fun parser_env ->
    let _2 = (peek_val parser_env 3 : string) in
    let _4 = (peek_val parser_env 1 : string) in
    Obj.repr(
# 109 "sl_parser.mly"
                                                               ( NamespaceDecl (_2, _4), pos() )
# 1354 "sl_parser.ml"
               : 'namespace_decl))
; (fun parser_env ->
    Obj.repr(
# 112 "sl_parser.mly"
                                                               ( `Server )
# 1360 "sl_parser.ml"
               : 'perhaps_location))
; (fun parser_env ->
    Obj.repr(
# 113 "sl_parser.mly"
                                                               ( `Client )
# 1366 "sl_parser.ml"
               : 'perhaps_location))
; (fun parser_env ->
    Obj.repr(
# 114 "sl_parser.mly"
                                                               ( `Unknown )
# 1372 "sl_parser.ml"
               : 'perhaps_location))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Num.num) in
    Obj.repr(
# 117 "sl_parser.mly"
                                                               ( IntLit _1    , pos() )
# 1379 "sl_parser.ml"
               : 'constant))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : float) in
    Obj.repr(
# 118 "sl_parser.mly"
                                                               ( FloatLit _1  , pos() )
# 1386 "sl_parser.ml"
               : 'constant))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : string) in
    Obj.repr(
# 119 "sl_parser.mly"
                                                               ( StringLit _1 , pos() )
# 1393 "sl_parser.ml"
               : 'constant))
; (fun parser_env ->
    Obj.repr(
# 120 "sl_parser.mly"
                                                               ( BoolLit true , pos() )
# 1399 "sl_parser.ml"
               : 'constant))
; (fun parser_env ->
    Obj.repr(
# 121 "sl_parser.mly"
                                                               ( BoolLit false, pos() )
# 1405 "sl_parser.ml"
               : 'constant))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : char) in
    Obj.repr(
# 122 "sl_parser.mly"
                                                               ( CharLit _1   , pos() )
# 1412 "sl_parser.ml"
               : 'constant))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : string) in
    Obj.repr(
# 125 "sl_parser.mly"
                                                               ( Var _1, pos() )
# 1419 "sl_parser.ml"
               : 'primary_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'constant) in
    Obj.repr(
# 126 "sl_parser.mly"
                                                               ( _1 )
# 1426 "sl_parser.ml"
               : 'primary_expression))
; (fun parser_env ->
    Obj.repr(
# 127 "sl_parser.mly"
                                                               ( CollectionLit (`Set, []), pos() )
# 1432 "sl_parser.ml"
               : 'primary_expression))
; (fun parser_env ->
    let _2 = (peek_val parser_env 1 : 'exps) in
    Obj.repr(
# 128 "sl_parser.mly"
                                                               ( CollectionLit (`Set, _2), pos() )
# 1439 "sl_parser.ml"
               : 'primary_expression))
; (fun parser_env ->
    Obj.repr(
# 129 "sl_parser.mly"
                                                               ( CollectionLit (`Bag, []), pos() )
# 1445 "sl_parser.ml"
               : 'primary_expression))
; (fun parser_env ->
    let _2 = (peek_val parser_env 1 : 'exps) in
    Obj.repr(
# 130 "sl_parser.mly"
                                                               ( CollectionLit (`Bag, _2), pos() )
# 1452 "sl_parser.ml"
               : 'primary_expression))
; (fun parser_env ->
    Obj.repr(
# 131 "sl_parser.mly"
                                                               ( CollectionLit (`List, []), pos() )
# 1458 "sl_parser.ml"
               : 'primary_expression))
; (fun parser_env ->
    let _2 = (peek_val parser_env 1 : 'exps) in
    Obj.repr(
# 132 "sl_parser.mly"
                                                               ( CollectionLit (`List, _2), pos() )
# 1465 "sl_parser.ml"
               : 'primary_expression))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'exp) in
    Obj.repr(
# 133 "sl_parser.mly"
                                                               ( SortExp (true, _3), pos() )
# 1472 "sl_parser.ml"
               : 'primary_expression))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'exp) in
    Obj.repr(
# 134 "sl_parser.mly"
                                                               ( SortExp (false, _3), pos() )
# 1479 "sl_parser.ml"
               : 'primary_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'xml) in
    Obj.repr(
# 135 "sl_parser.mly"
                                                               ( _1 )
# 1486 "sl_parser.ml"
               : 'primary_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'parenthesized_thing) in
    Obj.repr(
# 136 "sl_parser.mly"
                                                               ( _1 )
# 1493 "sl_parser.ml"
               : 'primary_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : string) in
    Obj.repr(
# 139 "sl_parser.mly"
                                                               ( ConstructorLit(_1, None), pos() )
# 1500 "sl_parser.ml"
               : 'constructor_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : string) in
    let _2 = (peek_val parser_env 0 : 'primary_expression) in
    Obj.repr(
# 140 "sl_parser.mly"
                                                               ( ConstructorLit(_1, Some _2), pos() )
# 1508 "sl_parser.ml"
               : 'constructor_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : string) in
    let _2 = (peek_val parser_env 0 : 'constructor_expression) in
    Obj.repr(
# 141 "sl_parser.mly"
                                                               ( ConstructorLit(_1, Some _2), pos() )
# 1516 "sl_parser.ml"
               : 'constructor_expression))
; (fun parser_env ->
    let _2 = (peek_val parser_env 1 : 'binop) in
    Obj.repr(
# 145 "sl_parser.mly"
                                                               ( Section _2, pos() )
# 1523 "sl_parser.ml"
               : 'parenthesized_thing))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : string) in
    Obj.repr(
# 146 "sl_parser.mly"
                                                               ( Section (`Project _3), pos() )
# 1530 "sl_parser.ml"
               : 'parenthesized_thing))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : Num.num) in
    Obj.repr(
# 147 "sl_parser.mly"
                                                               ( Section (`Project (string_of_num _3)), pos() )
# 1537 "sl_parser.ml"
               : 'parenthesized_thing))
; (fun parser_env ->
    Obj.repr(
# 148 "sl_parser.mly"
                                                               ( RecordLit ([], None), pos() )
# 1543 "sl_parser.ml"
               : 'parenthesized_thing))
; (fun parser_env ->
    let _2 = (peek_val parser_env 3 : 'labeled_exps) in
    let _4 = (peek_val parser_env 1 : 'exp) in
    Obj.repr(
# 149 "sl_parser.mly"
                                                               ( RecordLit (_2, Some _4), pos() )
# 1551 "sl_parser.ml"
               : 'parenthesized_thing))
; (fun parser_env ->
    let _2 = (peek_val parser_env 1 : 'labeled_exps) in
    Obj.repr(
# 150 "sl_parser.mly"
                                                               ( RecordLit (_2, None),               pos() )
# 1558 "sl_parser.ml"
               : 'parenthesized_thing))
; (fun parser_env ->
    let _2 = (peek_val parser_env 1 : 'exps) in
    Obj.repr(
# 151 "sl_parser.mly"
                                                               ( TupleLit (_2), pos() )
# 1565 "sl_parser.ml"
               : 'parenthesized_thing))
; (fun parser_env ->
    Obj.repr(
# 155 "sl_parser.mly"
                                                               ( `Times )
# 1571 "sl_parser.ml"
               : 'binop))
; (fun parser_env ->
    Obj.repr(
# 156 "sl_parser.mly"
                                                               ( `Div )
# 1577 "sl_parser.ml"
               : 'binop))
; (fun parser_env ->
    Obj.repr(
# 157 "sl_parser.mly"
                                                               ( `Exp )
# 1583 "sl_parser.ml"
               : 'binop))
; (fun parser_env ->
    Obj.repr(
# 158 "sl_parser.mly"
                                                               ( `Plus )
# 1589 "sl_parser.ml"
               : 'binop))
; (fun parser_env ->
    Obj.repr(
# 159 "sl_parser.mly"
                                                               ( `Minus )
# 1595 "sl_parser.ml"
               : 'binop))
; (fun parser_env ->
    Obj.repr(
# 160 "sl_parser.mly"
                                                               ( `FloatTimes )
# 1601 "sl_parser.ml"
               : 'binop))
; (fun parser_env ->
    Obj.repr(
# 161 "sl_parser.mly"
                                                               ( `FloatDiv )
# 1607 "sl_parser.ml"
               : 'binop))
; (fun parser_env ->
    Obj.repr(
# 162 "sl_parser.mly"
                                                               ( `FloatExp )
# 1613 "sl_parser.ml"
               : 'binop))
; (fun parser_env ->
    Obj.repr(
# 163 "sl_parser.mly"
                                                               ( `FloatPlus )
# 1619 "sl_parser.ml"
               : 'binop))
; (fun parser_env ->
    Obj.repr(
# 164 "sl_parser.mly"
                                                               ( `FloatMinus )
# 1625 "sl_parser.ml"
               : 'binop))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'primary_expression) in
    Obj.repr(
# 167 "sl_parser.mly"
                                                               ( _1 )
# 1632 "sl_parser.ml"
               : 'postfix_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'block) in
    Obj.repr(
# 168 "sl_parser.mly"
                                                               ( _1 )
# 1639 "sl_parser.ml"
               : 'postfix_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'postfix_expression) in
    Obj.repr(
# 169 "sl_parser.mly"
                                                               ( FnAppl (_1, []), pos() )
# 1646 "sl_parser.ml"
               : 'postfix_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 3 : 'postfix_expression) in
    let _3 = (peek_val parser_env 1 : 'exps) in
    Obj.repr(
# 170 "sl_parser.mly"
                                                               ( FnAppl (_1, _3), pos() )
# 1654 "sl_parser.ml"
               : 'postfix_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'postfix_expression) in
    let _3 = (peek_val parser_env 0 : 'record_label) in
    Obj.repr(
# 172 "sl_parser.mly"
                                                               ( Projection (_1, _3), pos() )
# 1662 "sl_parser.ml"
               : 'postfix_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'exp) in
    let _3 = (peek_val parser_env 0 : 'exps) in
    Obj.repr(
# 175 "sl_parser.mly"
                                                               ( _1 :: _3 )
# 1670 "sl_parser.ml"
               : 'exps))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'exp) in
    Obj.repr(
# 176 "sl_parser.mly"
                                                               ( [_1] )
# 1677 "sl_parser.ml"
               : 'exps))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : 'unary_expression) in
    Obj.repr(
# 179 "sl_parser.mly"
                                                               ( UnaryAppl (`Minus,      _2), pos() )
# 1684 "sl_parser.ml"
               : 'unary_expression))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : 'unary_expression) in
    Obj.repr(
# 180 "sl_parser.mly"
                                                               ( UnaryAppl (`FloatMinus, _2), pos() )
# 1691 "sl_parser.ml"
               : 'unary_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'postfix_expression) in
    Obj.repr(
# 181 "sl_parser.mly"
                                                               ( _1 )
# 1698 "sl_parser.ml"
               : 'unary_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'constructor_expression) in
    Obj.repr(
# 182 "sl_parser.mly"
                                                               ( _1 )
# 1705 "sl_parser.ml"
               : 'unary_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'unary_expression) in
    Obj.repr(
# 185 "sl_parser.mly"
                                                               ( _1 )
# 1712 "sl_parser.ml"
               : 'exponentiation_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'exponentiation_expression) in
    let _3 = (peek_val parser_env 0 : 'postfix_expression) in
    Obj.repr(
# 186 "sl_parser.mly"
                                                               ( InfixAppl (`Exp,      _1, _3), pos() )
# 1720 "sl_parser.ml"
               : 'exponentiation_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'exponentiation_expression) in
    let _3 = (peek_val parser_env 0 : 'postfix_expression) in
    Obj.repr(
# 187 "sl_parser.mly"
                                                               ( InfixAppl (`FloatExp, _1, _3), pos() )
# 1728 "sl_parser.ml"
               : 'exponentiation_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'exponentiation_expression) in
    Obj.repr(
# 190 "sl_parser.mly"
                                                               ( _1 )
# 1735 "sl_parser.ml"
               : 'multiplicative_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'multiplicative_expression) in
    let _3 = (peek_val parser_env 0 : 'exponentiation_expression) in
    Obj.repr(
# 191 "sl_parser.mly"
                                                               ( InfixAppl (`Times, _1, _3), pos() )
# 1743 "sl_parser.ml"
               : 'multiplicative_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'multiplicative_expression) in
    let _3 = (peek_val parser_env 0 : 'exponentiation_expression) in
    Obj.repr(
# 192 "sl_parser.mly"
                                                               ( InfixAppl (`Div, _1, _3), pos() )
# 1751 "sl_parser.ml"
               : 'multiplicative_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'multiplicative_expression) in
    let _3 = (peek_val parser_env 0 : 'exponentiation_expression) in
    Obj.repr(
# 193 "sl_parser.mly"
                                                               ( InfixAppl (`FloatTimes, _1, _3), pos() )
# 1759 "sl_parser.ml"
               : 'multiplicative_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'multiplicative_expression) in
    let _3 = (peek_val parser_env 0 : 'exponentiation_expression) in
    Obj.repr(
# 194 "sl_parser.mly"
                                                               ( InfixAppl (`FloatDiv, _1, _3), pos() )
# 1767 "sl_parser.ml"
               : 'multiplicative_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 197 "sl_parser.mly"
                                                               ( _1 )
# 1774 "sl_parser.ml"
               : 'addition_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'addition_expression) in
    let _3 = (peek_val parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 198 "sl_parser.mly"
                                                               ( InfixAppl (`Plus, _1, _3), pos() )
# 1782 "sl_parser.ml"
               : 'addition_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'addition_expression) in
    let _3 = (peek_val parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 199 "sl_parser.mly"
                                                               ( InfixAppl (`Minus, _1, _3), pos() )
# 1790 "sl_parser.ml"
               : 'addition_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'addition_expression) in
    let _3 = (peek_val parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 200 "sl_parser.mly"
                                                               ( InfixAppl (`FloatPlus, _1, _3), pos() )
# 1798 "sl_parser.ml"
               : 'addition_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'addition_expression) in
    let _3 = (peek_val parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 201 "sl_parser.mly"
                                                               ( InfixAppl (`FloatMinus, _1, _3), pos() )
# 1806 "sl_parser.ml"
               : 'addition_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'addition_expression) in
    Obj.repr(
# 204 "sl_parser.mly"
                                                               ( _1 )
# 1813 "sl_parser.ml"
               : 'comparison_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'comparison_expression) in
    let _3 = (peek_val parser_env 0 : 'addition_expression) in
    Obj.repr(
# 205 "sl_parser.mly"
                                                               ( InfixAppl (`Eq, _1, _3), pos() )
# 1821 "sl_parser.ml"
               : 'comparison_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'comparison_expression) in
    let _3 = (peek_val parser_env 0 : 'addition_expression) in
    Obj.repr(
# 206 "sl_parser.mly"
                                                               ( InfixAppl (`Less, _1, _3), pos() )
# 1829 "sl_parser.ml"
               : 'comparison_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'comparison_expression) in
    let _3 = (peek_val parser_env 0 : 'addition_expression) in
    Obj.repr(
# 207 "sl_parser.mly"
                                                               ( InfixAppl (`LessEq, _1, _3), pos() )
# 1837 "sl_parser.ml"
               : 'comparison_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'comparison_expression) in
    let _3 = (peek_val parser_env 0 : 'addition_expression) in
    Obj.repr(
# 208 "sl_parser.mly"
                                                               ( InfixAppl (`Greater, _1, _3), pos() )
# 1845 "sl_parser.ml"
               : 'comparison_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'comparison_expression) in
    let _3 = (peek_val parser_env 0 : 'addition_expression) in
    Obj.repr(
# 209 "sl_parser.mly"
                                                               ( InfixAppl (`GreaterEq, _1, _3), pos() )
# 1853 "sl_parser.ml"
               : 'comparison_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'comparison_expression) in
    let _3 = (peek_val parser_env 0 : 'addition_expression) in
    Obj.repr(
# 210 "sl_parser.mly"
                                                               ( InfixAppl (`NotEq, _1, _3), pos() )
# 1861 "sl_parser.ml"
               : 'comparison_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'comparison_expression) in
    let _3 = (peek_val parser_env 0 : 'addition_expression) in
    Obj.repr(
# 211 "sl_parser.mly"
                                                               ( InfixAppl (`BeginsWith, _1, _3), pos() )
# 1869 "sl_parser.ml"
               : 'comparison_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'comparison_expression) in
    Obj.repr(
# 214 "sl_parser.mly"
                                                               ( _1 )
# 1876 "sl_parser.ml"
               : 'logical_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'logical_expression) in
    let _3 = (peek_val parser_env 0 : 'comparison_expression) in
    Obj.repr(
# 215 "sl_parser.mly"
                                                               ( InfixAppl (`Or, _1, _3), pos() )
# 1884 "sl_parser.ml"
               : 'logical_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'logical_expression) in
    let _3 = (peek_val parser_env 0 : 'comparison_expression) in
    Obj.repr(
# 216 "sl_parser.mly"
                                                               ( InfixAppl (`And, _1, _3), pos() )
# 1892 "sl_parser.ml"
               : 'logical_expression))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : 'addition_expression) in
    Obj.repr(
# 217 "sl_parser.mly"
                                                               ( UnaryAppl (`Not, _2), pos() )
# 1899 "sl_parser.ml"
               : 'logical_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'logical_expression) in
    Obj.repr(
# 220 "sl_parser.mly"
                                                               ( _1 )
# 1906 "sl_parser.ml"
               : 'union_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'union_expression) in
    let _3 = (peek_val parser_env 0 : 'logical_expression) in
    Obj.repr(
# 221 "sl_parser.mly"
                                                               ( InfixAppl (`Concat, _1, _3), pos() )
# 1914 "sl_parser.ml"
               : 'union_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'union_expression) in
    Obj.repr(
# 224 "sl_parser.mly"
                                                               ( _1 )
# 1921 "sl_parser.ml"
               : 'db_expression))
; (fun parser_env ->
    let _3 = (peek_val parser_env 5 : string) in
    let _5 = (peek_val parser_env 3 : 'exp) in
    let _8 = (peek_val parser_env 0 : 'exp) in
    Obj.repr(
# 225 "sl_parser.mly"
                                                               ( DBUpdate (_3, _5, _8), pos() )
# 1930 "sl_parser.ml"
               : 'db_expression))
; (fun parser_env ->
    let _4 = (peek_val parser_env 5 : string) in
    let _6 = (peek_val parser_env 3 : 'exp) in
    let _9 = (peek_val parser_env 0 : 'exp) in
    Obj.repr(
# 226 "sl_parser.mly"
                                                               ( DBDelete (_4, _6, _9), pos() )
# 1939 "sl_parser.ml"
               : 'db_expression))
; (fun parser_env ->
    let _4 = (peek_val parser_env 5 : string) in
    let _6 = (peek_val parser_env 3 : 'exp) in
    let _9 = (peek_val parser_env 0 : 'exp) in
    Obj.repr(
# 227 "sl_parser.mly"
                                                               ( DBInsert (_4, _6, _9), pos() )
# 1948 "sl_parser.ml"
               : 'db_expression))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : string) in
    Obj.repr(
# 228 "sl_parser.mly"
                                                               ( DatabaseLit _2, pos() )
# 1955 "sl_parser.ml"
               : 'db_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'xml_forest) in
    Obj.repr(
# 231 "sl_parser.mly"
                                                               ( XmlForest _1, pos() )
# 1962 "sl_parser.ml"
               : 'xml))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Sl_sugar.phrase) in
    Obj.repr(
# 235 "sl_parser.mly"
                                                               ( [_1] )
# 1969 "sl_parser.ml"
               : 'xml_forest))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : Sl_sugar.phrase) in
    let _2 = (peek_val parser_env 0 : 'xml_forest) in
    Obj.repr(
# 236 "sl_parser.mly"
                                                               ( _1 :: _2 )
# 1977 "sl_parser.ml"
               : 'xml_forest))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : string) in
    Obj.repr(
# 239 "sl_parser.mly"
                                                               ( _1 )
# 1984 "sl_parser.ml"
               : 'xmlid))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'attr) in
    Obj.repr(
# 242 "sl_parser.mly"
                                                               ( [_1] )
# 1991 "sl_parser.ml"
               : 'attr_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'attr_list) in
    let _2 = (peek_val parser_env 0 : 'attr) in
    Obj.repr(
# 243 "sl_parser.mly"
                                                               ( _2 :: _1 )
# 1999 "sl_parser.ml"
               : 'attr_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 4 : 'xmlid) in
    let _4 = (peek_val parser_env 1 : 'attr_val) in
    Obj.repr(
# 246 "sl_parser.mly"
                                                               ( (_1, _4) )
# 2007 "sl_parser.ml"
               : 'attr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 3 : 'xmlid) in
    Obj.repr(
# 247 "sl_parser.mly"
                                                               ( (_1, [StringLit "", pos()]) )
# 2014 "sl_parser.ml"
               : 'attr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'block) in
    Obj.repr(
# 250 "sl_parser.mly"
                                                               ( [_1] )
# 2021 "sl_parser.ml"
               : 'attr_val))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : string) in
    Obj.repr(
# 251 "sl_parser.mly"
                                                               ( [StringLit _1, pos()] )
# 2028 "sl_parser.ml"
               : 'attr_val))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'block) in
    let _2 = (peek_val parser_env 0 : 'attr_val) in
    Obj.repr(
# 252 "sl_parser.mly"
                                                               ( _1 :: _2 )
# 2036 "sl_parser.ml"
               : 'attr_val))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : string) in
    let _2 = (peek_val parser_env 0 : 'attr_val) in
    Obj.repr(
# 253 "sl_parser.mly"
                                                               ( (StringLit _1, pos()) :: _2)
# 2044 "sl_parser.ml"
               : 'attr_val))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : string) in
    Obj.repr(
# 256 "sl_parser.mly"
                                                               ( Xml (_1, [], []), pos() )
# 2051 "sl_parser.ml"
               : Sl_sugar.phrase))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : string) in
    let _3 = (peek_val parser_env 0 : string) in
    Obj.repr(
# 257 "sl_parser.mly"
                                                               ( ensure_match _1 _3 (Xml (_1, [], []), pos()) )
# 2059 "sl_parser.ml"
               : Sl_sugar.phrase))
; (fun parser_env ->
    let _1 = (peek_val parser_env 3 : string) in
    let _3 = (peek_val parser_env 1 : 'xml_contents_list) in
    let _4 = (peek_val parser_env 0 : string) in
    Obj.repr(
# 258 "sl_parser.mly"
                                                               ( ensure_match _1 _4 (Xml (_1, [], _3), pos()) )
# 2068 "sl_parser.ml"
               : Sl_sugar.phrase))
; (fun parser_env ->
    let _1 = (peek_val parser_env 3 : string) in
    let _2 = (peek_val parser_env 2 : 'attr_list) in
    let _4 = (peek_val parser_env 0 : string) in
    Obj.repr(
# 259 "sl_parser.mly"
                                                               ( ensure_match _1 _4 (Xml (_1, _2, []), pos()) )
# 2077 "sl_parser.ml"
               : Sl_sugar.phrase))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : string) in
    let _2 = (peek_val parser_env 1 : 'attr_list) in
    Obj.repr(
# 260 "sl_parser.mly"
                                                               ( Xml (_1, _2, []), pos() )
# 2085 "sl_parser.ml"
               : Sl_sugar.phrase))
; (fun parser_env ->
    let _1 = (peek_val parser_env 4 : string) in
    let _2 = (peek_val parser_env 3 : 'attr_list) in
    let _4 = (peek_val parser_env 1 : 'xml_contents_list) in
    let _5 = (peek_val parser_env 0 : string) in
    Obj.repr(
# 261 "sl_parser.mly"
                                                               ( ensure_match _1 _5 (Xml (_1, _2, _4), pos()) )
# 2095 "sl_parser.ml"
               : Sl_sugar.phrase))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'xml_contents) in
    Obj.repr(
# 264 "sl_parser.mly"
                                                               ( [_1] )
# 2102 "sl_parser.ml"
               : 'xml_contents_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'xml_contents) in
    let _2 = (peek_val parser_env 0 : 'xml_contents_list) in
    Obj.repr(
# 265 "sl_parser.mly"
                                                               ( _1 :: _2 )
# 2110 "sl_parser.ml"
               : 'xml_contents_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'block) in
    Obj.repr(
# 268 "sl_parser.mly"
                                                               ( _1 )
# 2117 "sl_parser.ml"
               : 'xml_contents))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Sl_sugar.phrase) in
    Obj.repr(
# 269 "sl_parser.mly"
                                                               ( _1 )
# 2124 "sl_parser.ml"
               : 'xml_contents))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : string) in
    Obj.repr(
# 270 "sl_parser.mly"
                                                               ( TextNode (Sl_utility.xml_unescape _1), pos() )
# 2131 "sl_parser.ml"
               : 'xml_contents))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'db_expression) in
    Obj.repr(
# 273 "sl_parser.mly"
                                                               ( _1 )
# 2138 "sl_parser.ml"
               : 'conditional_expression))
; (fun parser_env ->
    let _3 = (peek_val parser_env 4 : 'exp) in
    let _5 = (peek_val parser_env 2 : 'exp) in
    let _7 = (peek_val parser_env 0 : 'exp) in
    Obj.repr(
# 274 "sl_parser.mly"
                                                               ( Conditional (_3, _5, _7), pos() )
# 2147 "sl_parser.ml"
               : 'conditional_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'case) in
    Obj.repr(
# 277 "sl_parser.mly"
                                                               ( [_1] )
# 2154 "sl_parser.ml"
               : 'cases))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'case) in
    let _2 = (peek_val parser_env 0 : 'cases) in
    Obj.repr(
# 278 "sl_parser.mly"
                                                               ( _1 :: _2 )
# 2162 "sl_parser.ml"
               : 'cases))
; (fun parser_env ->
    let _1 = (peek_val parser_env 3 : string) in
    let _2 = (peek_val parser_env 2 : 'patt) in
    let _4 = (peek_val parser_env 0 : 'exp) in
    Obj.repr(
# 281 "sl_parser.mly"
                                                               ( _1, _2, _4 )
# 2171 "sl_parser.ml"
               : 'case))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : string) in
    let _3 = (peek_val parser_env 0 : 'exp) in
    Obj.repr(
# 282 "sl_parser.mly"
                                                               ( _1, Pattern (RecordLit ([], None), pos ()), _3 )
# 2179 "sl_parser.ml"
               : 'case))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'conditional_expression) in
    Obj.repr(
# 285 "sl_parser.mly"
                                                               ( _1 )
# 2186 "sl_parser.ml"
               : 'case_expression))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'exp) in
    let _4 = (peek_val parser_env 2 : 'cases) in
    let _5 = (peek_val parser_env 1 : 'default_case) in
    Obj.repr(
# 286 "sl_parser.mly"
                                                               ( Switch (_2, _4, Some _5), pos() )
# 2195 "sl_parser.ml"
               : 'case_expression))
; (fun parser_env ->
    let _2 = (peek_val parser_env 3 : 'exp) in
    let _4 = (peek_val parser_env 1 : 'cases) in
    Obj.repr(
# 287 "sl_parser.mly"
                                                               ( Switch (_2, _4, None),    pos() )
# 2203 "sl_parser.ml"
               : 'case_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : string) in
    let _3 = (peek_val parser_env 0 : 'exp) in
    Obj.repr(
# 290 "sl_parser.mly"
                                                               ( (_1, _3) )
# 2211 "sl_parser.ml"
               : 'default_case))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'case_expression) in
    Obj.repr(
# 293 "sl_parser.mly"
                                                               ( _1 )
# 2218 "sl_parser.ml"
               : 'table_expression))
; (fun parser_env ->
    let _2 = (peek_val parser_env 6 : string) in
    let _4 = (peek_val parser_env 4 : 'kind) in
    let _5 = (peek_val parser_env 3 : 'unique) in
    let _6 = (peek_val parser_env 2 : 'perhaps_order) in
    let _8 = (peek_val parser_env 0 : 'exp) in
    Obj.repr(
# 294 "sl_parser.mly"
                                                               ( TableLit (_2, _4, _5, _6, _8), pos() )
# 2229 "sl_parser.ml"
               : 'table_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'table_expression) in
    Obj.repr(
# 297 "sl_parser.mly"
                                                               ( _1 )
# 2236 "sl_parser.ml"
               : 'iteration_expression))
; (fun parser_env ->
    let _2 = (peek_val parser_env 2 : 'provider) in
    let _4 = (peek_val parser_env 0 : 'exp) in
    Obj.repr(
# 298 "sl_parser.mly"
                                                               ( Iteration (fst _2, snd _2, _4, None),    pos() )
# 2244 "sl_parser.ml"
               : 'iteration_expression))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'provider) in
    let _4 = (peek_val parser_env 2 : 'exp) in
    let _6 = (peek_val parser_env 0 : 'exp) in
    Obj.repr(
# 299 "sl_parser.mly"
                                                               ( Iteration (fst _2, snd _2, _6, Some _4), pos() )
# 2253 "sl_parser.ml"
               : 'iteration_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'iteration_expression) in
    Obj.repr(
# 302 "sl_parser.mly"
                                                               ( _1 )
# 2260 "sl_parser.ml"
               : 'escape_expression))
; (fun parser_env ->
    let _2 = (peek_val parser_env 2 : string) in
    let _4 = (peek_val parser_env 0 : 'postfix_expression) in
    Obj.repr(
# 303 "sl_parser.mly"
                                                               ( Escape (_2, _4), pos() )
# 2268 "sl_parser.ml"
               : 'escape_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'escape_expression) in
    Obj.repr(
# 306 "sl_parser.mly"
                                                               ( _1 )
# 2275 "sl_parser.ml"
               : 'lambda_expression))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'exp) in
    let _4 = (peek_val parser_env 2 : string) in
    let _6 = (peek_val parser_env 0 : 'exp) in
    Obj.repr(
# 307 "sl_parser.mly"
                                                               ( HandleWith (_2, _4, _6), pos() )
# 2284 "sl_parser.ml"
               : 'lambda_expression))
; (fun parser_env ->
    let _2 = (peek_val parser_env 1 : 'arg_list) in
    let _3 = (peek_val parser_env 0 : 'block) in
    Obj.repr(
# 308 "sl_parser.mly"
                                                               ( FunLit (None, _2, _3), pos() )
# 2292 "sl_parser.ml"
               : 'lambda_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'parenthesized_pattern) in
    Obj.repr(
# 311 "sl_parser.mly"
                                                               ( [_1] )
# 2299 "sl_parser.ml"
               : 'arg_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'parenthesized_pattern) in
    let _2 = (peek_val parser_env 0 : 'arg_list) in
    Obj.repr(
# 312 "sl_parser.mly"
                                                               ( _1 :: _2 )
# 2307 "sl_parser.ml"
               : 'arg_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'parenthesized_thing) in
    Obj.repr(
# 315 "sl_parser.mly"
                                                               ( Pattern _1 )
# 2314 "sl_parser.ml"
               : 'parenthesized_pattern))
; (fun parser_env ->
    let _1 = (peek_val parser_env 3 : 'patt) in
    let _3 = (peek_val parser_env 1 : 'exp) in
    Obj.repr(
# 318 "sl_parser.mly"
                                                               ( Binding (_1, _3), pos() )
# 2322 "sl_parser.ml"
               : 'binding))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'exp) in
    Obj.repr(
# 319 "sl_parser.mly"
                                                               ( _1 )
# 2329 "sl_parser.ml"
               : 'binding))
; (fun parser_env ->
    let _2 = (peek_val parser_env 2 : string) in
    let _3 = (peek_val parser_env 1 : 'arg_list) in
    let _4 = (peek_val parser_env 0 : 'block) in
    Obj.repr(
# 320 "sl_parser.mly"
                                                               ( FunLit (Some _2, _3, _4), pos() )
# 2338 "sl_parser.ml"
               : 'binding))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'binding) in
    Obj.repr(
# 323 "sl_parser.mly"
                                                               ( [_1] )
# 2345 "sl_parser.ml"
               : 'bindings))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'bindings) in
    let _2 = (peek_val parser_env 0 : 'binding) in
    Obj.repr(
# 324 "sl_parser.mly"
                                                               ( _1 @ [_2] )
# 2353 "sl_parser.ml"
               : 'bindings))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'lambda_expression) in
    Obj.repr(
# 327 "sl_parser.mly"
                                                               ( _1 )
# 2360 "sl_parser.ml"
               : 'amper_expression))
; (fun parser_env ->
    let _2 = (peek_val parser_env 3 : 'bindings) in
    let _3 = (peek_val parser_env 2 : 'exp) in
    let _4 = (peek_val parser_env 1 : 'perhaps_semi) in
    Obj.repr(
# 331 "sl_parser.mly"
                                                               ( Block (_2, _3), pos() )
# 2369 "sl_parser.ml"
               : 'block))
; (fun parser_env ->
    let _2 = (peek_val parser_env 2 : 'exp) in
    let _3 = (peek_val parser_env 1 : 'perhaps_semi) in
    Obj.repr(
# 332 "sl_parser.mly"
                                                               ( _2 )
# 2377 "sl_parser.ml"
               : 'block))
; (fun parser_env ->
    Obj.repr(
# 335 "sl_parser.mly"
                                                               ()
# 2383 "sl_parser.ml"
               : 'perhaps_semi))
; (fun parser_env ->
    Obj.repr(
# 336 "sl_parser.mly"
                                                               ()
# 2389 "sl_parser.ml"
               : 'perhaps_semi))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'amper_expression) in
    Obj.repr(
# 339 "sl_parser.mly"
                                                               ( (_1 : Sl_sugar.phrase) )
# 2396 "sl_parser.ml"
               : 'exp))
; (fun parser_env ->
    Obj.repr(
# 342 "sl_parser.mly"
                                                               ( true )
# 2402 "sl_parser.ml"
               : 'unique))
; (fun parser_env ->
    Obj.repr(
# 343 "sl_parser.mly"
                                                               ( false )
# 2408 "sl_parser.ml"
               : 'unique))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'orders) in
    Obj.repr(
# 346 "sl_parser.mly"
                                                               ( _3 )
# 2415 "sl_parser.ml"
               : 'perhaps_order))
; (fun parser_env ->
    Obj.repr(
# 347 "sl_parser.mly"
                                                               ( [] )
# 2421 "sl_parser.ml"
               : 'perhaps_order))
; (fun parser_env ->
    Obj.repr(
# 348 "sl_parser.mly"
                                                               ( [] )
# 2427 "sl_parser.ml"
               : 'perhaps_order))
; (fun parser_env ->
    let _1 = (peek_val parser_env 4 : string) in
    let _5 = (peek_val parser_env 0 : 'orders) in
    Obj.repr(
# 351 "sl_parser.mly"
                                                               ( (`Asc _1) :: _5 )
# 2435 "sl_parser.ml"
               : 'orders))
; (fun parser_env ->
    let _1 = (peek_val parser_env 4 : string) in
    let _5 = (peek_val parser_env 0 : 'orders) in
    Obj.repr(
# 352 "sl_parser.mly"
                                                               ( (`Desc _1) :: _5 )
# 2443 "sl_parser.ml"
               : 'orders))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : string) in
    Obj.repr(
# 353 "sl_parser.mly"
                                                               ( [`Asc _1] )
# 2450 "sl_parser.ml"
               : 'orders))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : string) in
    Obj.repr(
# 354 "sl_parser.mly"
                                                               ( [`Desc _1] )
# 2457 "sl_parser.ml"
               : 'orders))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'record_label) in
    let _3 = (peek_val parser_env 0 : 'exp) in
    Obj.repr(
# 358 "sl_parser.mly"
                                                               ( [_1, _3] )
# 2465 "sl_parser.ml"
               : 'labeled_exps))
; (fun parser_env ->
    let _1 = (peek_val parser_env 4 : 'record_label) in
    let _3 = (peek_val parser_env 2 : 'exp) in
    let _5 = (peek_val parser_env 0 : 'labeled_exps) in
    Obj.repr(
# 359 "sl_parser.mly"
                                                               ( (_1, _3) :: _5 )
# 2474 "sl_parser.ml"
               : 'labeled_exps))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : string) in
    Obj.repr(
# 362 "sl_parser.mly"
                                                               ( _1 )
# 2481 "sl_parser.ml"
               : 'record_label))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Num.num) in
    Obj.repr(
# 363 "sl_parser.mly"
                                                               ( string_of_num _1 )
# 2488 "sl_parser.ml"
               : 'record_label))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'patt) in
    let _3 = (peek_val parser_env 0 : 'exp) in
    Obj.repr(
# 366 "sl_parser.mly"
                                                               ( _1, _3 )
# 2496 "sl_parser.ml"
               : 'provider))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'exp) in
    Obj.repr(
# 369 "sl_parser.mly"
                                                               ( Pattern _1 )
# 2503 "sl_parser.ml"
               : 'patt))
; (fun parser_env ->
    let _2 = (peek_val parser_env 1 : 'kind) in
    Obj.repr(
# 372 "sl_parser.mly"
                                                               ( _2 )
# 2510 "sl_parser.ml"
               : 'kind))
; (fun parser_env ->
    Obj.repr(
# 373 "sl_parser.mly"
                                                               ( `Primitive `Bool )
# 2516 "sl_parser.ml"
               : 'kind))
; (fun parser_env ->
    Obj.repr(
# 374 "sl_parser.mly"
                                                               ( `Primitive `Int )
# 2522 "sl_parser.ml"
               : 'kind))
; (fun parser_env ->
    Obj.repr(
# 375 "sl_parser.mly"
                                                               ( `Primitive `Float )
# 2528 "sl_parser.ml"
               : 'kind))
; (fun parser_env ->
    Obj.repr(
# 376 "sl_parser.mly"
                                                               ( `Collection (`List, `Primitive `Char) )
# 2534 "sl_parser.ml"
               : 'kind))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : int) in
    Obj.repr(
# 377 "sl_parser.mly"
                                                               ( `TypeVar _1 )
# 2541 "sl_parser.ml"
               : 'kind))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'kind) in
    let _3 = (peek_val parser_env 0 : 'kind) in
    Obj.repr(
# 378 "sl_parser.mly"
                                                               ( `Function (_1, _3) )
# 2549 "sl_parser.ml"
               : 'kind))
; (fun parser_env ->
    let _2 = (peek_val parser_env 1 : 'labeled_kinds) in
    Obj.repr(
# 379 "sl_parser.mly"
                                                               ( `Record _2 )
# 2556 "sl_parser.ml"
               : 'kind))
; (fun parser_env ->
    let _2 = (peek_val parser_env 1 : 'kind) in
    Obj.repr(
# 381 "sl_parser.mly"
                                                               ( `Collection (`Set, _2) )
# 2563 "sl_parser.ml"
               : 'kind))
; (fun parser_env ->
    let _2 = (peek_val parser_env 1 : 'kind) in
    Obj.repr(
# 382 "sl_parser.mly"
                                                               ( `Collection (`Bag, _2) )
# 2570 "sl_parser.ml"
               : 'kind))
; (fun parser_env ->
    let _2 = (peek_val parser_env 1 : 'kind) in
    Obj.repr(
# 383 "sl_parser.mly"
                                                               ( `Collection (`List, _2) )
# 2577 "sl_parser.ml"
               : 'kind))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : string) in
    let _3 = (peek_val parser_env 0 : 'kind) in
    Obj.repr(
# 386 "sl_parser.mly"
                                                               ( (_1, `Present _3) )
# 2585 "sl_parser.ml"
               : 'field))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : string) in
    Obj.repr(
# 387 "sl_parser.mly"
                                                               ( (_1, `Absent) )
# 2592 "sl_parser.ml"
               : 'field))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'field) in
    let _3 = (peek_val parser_env 0 : 'labeled_kinds) in
    Obj.repr(
# 390 "sl_parser.mly"
                                                               ( TypeOps.set_field _1 _3 )
# 2600 "sl_parser.ml"
               : 'labeled_kinds))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'field) in
    Obj.repr(
# 391 "sl_parser.mly"
                                                               ( TypeOps.make_singleton_closed_row _1 )
# 2607 "sl_parser.ml"
               : 'labeled_kinds))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : int) in
    Obj.repr(
# 392 "sl_parser.mly"
                                                               ( TypeOps.make_empty_open_row_with_var _1 )
# 2614 "sl_parser.ml"
               : 'labeled_kinds))
(* Entry parse_links *)
; (fun parser_env -> raise (YYexit (peek_val parser_env 0)))
|]
let yytables =
  { actions=yyact;
    transl_const=yytransl_const;
    transl_block=yytransl_block;
    lhs=yylhs;
    len=yylen;
    defred=yydefred;
    dgoto=yydgoto;
    sindex=yysindex;
    rindex=yyrindex;
    gindex=yygindex;
    tablesize=yytablesize;
    table=yytable;
    check=yycheck;
    error_function=parse_error;
    names_const=yynames_const;
    names_block=yynames_block }
let parse_links (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (yyparse yytables 1 lexfun lexbuf : Sl_sugar.phrase list)
