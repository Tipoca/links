fun all(p, l) {
   switch (l) {
     case []    -> true
     case x::xs -> p(x) && all(p, xs)
   }
}

fun and(l) { 
   switch (l) {
     case [] -> true
     case x::xs -> x && and(xs)
   }
}

fun or(l) { 
   switch (l) {
     case [] -> false
     case x::xs -> x || or(xs)
   }
}

fun any(p, l) {
   switch (l) {
     case [] -> false
     case x::xs -> p(x) || any(p, xs)
   }
}

fun the(l) {
  var x = hd(l);
  if (all(fun (y) { x == y }, l))
    x
  else
    error("list argument to 'the' had varying values.")
}

fun elem(x, l) {
  not(l==[]) && (x == hd(l) || x `elem` tl(l))
}

fun odd(i)  { i `mod` 2 == 1 }
fun even(i) { i `mod` 2 == 0 }

#fun null(l) { l == [] }

# return element at index i of xs
fun select(xs, i) {
  hd(drop(i, xs))
}

# infix operator for 'select'
op xs !! n { select(n, xs) }

# swap all instances of x1 and x2 in xs
fun swap(xs, x1, x2) {
 for (var x <- xs) {
  if (x == x1) [x2]
  else if (x == x2) [x1]
  else [x]
 }
}

fun fold_left(p, u, l) {
  switch (l) {
    case [] -> u
    case x::xs -> fold_left(p, p(u, x), xs)
  }
}

fun fold_left1(p, l) {
  fold_left(p, hd(l), tl(l))
}

fun fold_right(f, u, l) {
  switch (l) {
    case [] -> u
    case x::xs -> f(x, fold_right(f,u,xs))
  }
}

fun fold_right1(f, l) {
  fold_right(f, hd(l), tl(l))
}

fun unzip(l) {
  switch (l) {
    case [] -> ([], [])
    case (a,b)::xs -> { 
     var (c,d) = unzip(xs);
     (a :: c, b :: d)
    }
  }
}

fun zip(l, r) {
  switch ((l, r)) {
    case ([], []) -> []
    case (lh::lt, rh::rt) -> 
        (lh, rh) :: zip (lt, rt)
    case (_, _) -> []
  }
}

fun replicate(n, item) {
  if (n == 0) []
  else item :: replicate(n-1, item)
}

fun filter(p, l) {
  for (var x <- l) where (p(x)) [x]
}

fun flip(f) {
  fun(x,y) { f(y,x) }
}

fun curry(f) {
  fun (x)(y) { f(x,y) }
}

fun uncurry(f) {
  fun (x, y) { f(x)(y) }
}

fun compose(f, g) {
  fun (x) { f(g(x)) }
}

fun id(x) { x }

fun concatMap(f,l) {
  for (var x <- l) f(x)
}

fun first(p)   { p.1 }
fun second(p)  { p.2 }
fun third(p)   { p.3 }
fun fourth(p)  { p.4 }
fun fifth(p)   { p.5 }
fun sixth(p)   { p.6 }
fun seventh(p) { p.7 }
fun eighth(p)  { p.8 }
fun ninth(p)   { p.9 }
fun tenth(p)   { p.10 }

fun sum(ns) {
  fold_left((+), 0, ns)
}

fun product(ns) {
  fold_left((*), 1, ns)
}

fun map(f, l) {
  switch (l) {
    case []     -> []
    case hd::tl -> f(hd) :: map(f,tl)
  }
}

fun reverse(l) {
  fun aux(l,o) {
    switch (l) {
      case [] -> o
      case x::xs -> aux(xs, x::o)
    }
  }
  aux(l, [])
}


fun concat(list) {
  switch (list) {
    case [] -> []
    case (x::xs) -> x ++ concat(xs)
  }
}

fun join(glue,list) {
  switch (list) {
    case [] -> []
    case [x] -> x
    case (x::xs) -> x ++ glue ++ join(glue,xs)
  }
}

# break :: ((a) -> Bool) -> ([a]) -> ([a],[a])
# concat :: [[a]] -> [a]
# const :: const :: (a) -> b -> a
# elemBy :: ((a) -> (a) -> Bool) -> (a) -> ([a]) -> Bool
# notElemBy :: ((a) -> (a) -> Bool) -> (a) -> ([a]) -> Bool
# span :: ((a) -> Bool) -> ([a]) -> ([a],[a])
# splitAt :: Int -> ([a]) -> ([a],[a])

sig takeWhile : ((a) -> Bool, [a]) -> [a]
fun takeWhile(pred, list) {
  switch (list) {
    case [] -> []
    case (h::t) -> 
      switch (pred(h)) {
        case true -> h :: takeWhile(pred, t)
        case false -> []
      }
  }
}

sig dropWhile : ((a) -> Bool, [a]) -> [a]
fun dropWhile(pred, list) {
  switch (list) {
    case [] -> []
    case (h::t) -> 
      switch (pred(h)) {
        case true -> dropWhile(pred, t)
        case false -> list
      }
  }
}

sig ignore : (a) -> ()
fun ignore (_) { }

# until :: ((a) -> Bool) -> ((a) -> a) -> (a) -> a
# zipWith :: ((a) -> b -> c) -> ([a]) -> [b] -> [c]

# div :: Int -> Int -> Int
# gcd :: Int -> Int -> Int
# rem :: Int -> Int -> Int
# lcm :: Int -> Int -> Int
# subtract :: Int -> Int -> Int
# quot :: Int -> Int -> Int

sig signum : (Int) -> Int
fun signum(i) {
  if (i>0) 1
  else if (i < 0) -1
  else 0
}

#sig abs : (Int) -> Int
#fun abs(i) {
#  if (i < 0) -i else i
#}

sig init : ([a]) -> [a]
fun init(list) {
  switch (list) {
    case [y] -> []
    case (h::t) -> h::init(t)
  }
}

fun butlast(list) { init(list) }

sig last : ([a]) -> a
fun last(list) {
  switch (list) {
    case [x] -> x
    case (h::t) -> last(t)
  }
}


# lines :: String -> [String]
# unlines :: [String] -> String
# unwords :: [String] -> String
# words :: String -> [String]

### Defined internally to Links:
# ceiling :: Float -> Int
# floor :: Float -> Int
# cos :: Float -> Float
# log :: Float -> Float
# sin :: Float -> Float
# sqrt :: Float -> Float
# tan :: Float -> Float
# (*.) :: Float -> Float -> Float
# (/.) :: Float -> Float -> Float
# (+.) :: Float -> Float -> Float
# (-.) :: Float -> Float -> Float
# (^.) :: Float -> Int -> Float
# (/=.) :: Float -> Float -> Bool
# (==.) :: Float -> Float -> Bool

# (**.) :: Float -> Float -> Float
# exp :: Float -> Float
# pi :: Float
# signumFloat :: Float -> Int
# round :: Float -> Int
# truncate :: Float -> Int

# Option types
typename Maybe (a) = [|Nothing | Just:a|];

sig isJust : (Maybe (a)) -> Bool
fun isJust(x) {
  switch (x) {
    case Just (x) -> true
    case Nothing -> false
  }
}


sig search : ((a) -> Bool, [a]) -> Maybe (a)
fun search(p,l) {
  switch (l) {
    case [] -> Nothing
    case x::xs -> if (p(x)) Just(x)
                  else search(p,xs)
  }
}

sig find : ((a) -> Bool, [a]) -> a
fun find(p,l) {
  switch (l) {
    case [] -> error("Not_found")
    case x::xs -> if (p(x)) x
                  else find(p,xs)
  }
}

sig fromJust : (Maybe (a)) -> a
fun fromJust(x) {
  switch (x) {
    case Just (x) -> x
    case Nothing -> error ("fromJust failed")
  }
}

sig fromMaybe : (Maybe (a), a) -> a
fun fromMaybe(x, y) {
  switch (x) {
    case Just (x) -> x
    case Nothing -> y
  }
}


# association lists
# TBD: memassoc is an old LISP word. Perhaps a more modern name would fit better?
sig memassoc : (a,[(a,b)]) -> Bool
fun memassoc(x,l) {
  switch (l) {
    case []    -> false
    case (k,v)::xs -> k == x || memassoc(x, xs)
  }
}

sig lookup : (a,[(a,b)]) -> Maybe (b)
fun lookup(x,l) {
  switch (l) {
    case [] -> Nothing
    case (a,b)::xs -> if (a == x) Just(b)
                      else lookup(x,xs)
  }
}

sig assoc : (String,[(String,b)]) -> b
fun assoc(x,l) {
  switch (l) {
    case []    -> error("Not found " ++ x)
    case (k,v)::xs -> if (k == x) v
                      else assoc(x, xs)
  }
}

sig assocAll : (String,[(String,b)]) -> [b]
fun assocAll(x,l) {
  switch (l) {
    case []    -> []
    case (k,v)::xs -> if (k == x) 
                        (v::assocAll(x,xs))
                      else
                        assocAll(x,xs)
  }
}

# TBD: rename this 'sortOn' to follow Haskell usage?
sig sortBy : ((a) -> b, [a]) -> [a]
fun sortBy (f, l) {
  switch (l) {
    case [] -> []
    case x::xs -> {
      var lt = for (var y <- xs) where (f(y) < f(x))  [y];
      var ge = for (var y <- xs) where (f(y) >= f(x)) [y];
      sortBy(f, lt) ++ [x] ++ sortBy(f, ge)
    }
  }
}

#### WEB-RELATED ####

# [freshResource] is a bit of magic that makes the subsequent actions a
# new resource.  That is, it redirects the user to a new URL for the
# continuation. If you call this immediately after doing a destructive
# action (e.g. database updates) then reloading and the back button 
# are made "safe": the visible URL does not refer to the action, but 
# only to what follows the freshResource call.
# Note: doesn't presently work in client context, but could.
sig freshResource : () -> ()
fun freshResource() {
  escape esc in {
    redirect("?_cont=" ++ reifyK(esc)); exit(0)
  }
}

# [sendSuspend] generates some XML, outputs it, and terminates. It
# passes to xmlf the continuation, which will resume at the place
# of the sendSuspend call. This continuation can be used in l:handler
# for example, to pass the form values through as the return value
# of sendSuspend.
sig sendSuspend : (((a) -> ()) -> Xml) -> a
fun sendSuspend(xmlf) {
  escape returnf in {
    exit(xmlf(returnf))
  }
}


#### FORMLETS ####
####   A library of functions supporting the 'formlet ... yields ...' syntax
####   TBD: move to a namespaced module

typename Env = [(String,String)];
typename Names = Int;
typename State (d,a) = [|State:(d) ->(a,d)|];
typename Collector (a) = (Env) -> a;
typename Formlet (a) = State (Names, (Xml,Collector(a)));
typename Combiner (a,b,c) = (Collector (a)) -> (Collector (b)) -> Collector (c);

infixr 0 $;
sig $ : ((a) -> b, a) -> b
op f $ x { f(x) }

# state monad
sig runState : (State (d,a)) -> (d) -> (a,d)
fun runState(State (s)) { s }

infixl 1 >>=;
sig >>= : (State (d,a), (a) -> State(d,b)) -> State (d,b)
op State (x) >>= f {
   State (fun (s1) { var (v,s2) = x (s1); runState (f (v)) (s2) })
}

infixl 1 >>;
sig >> : (State(a,b), State (a,c)) -> State (a,c)
op m >> k {
   m >>= fun (_) { k }
}

sig retern : (a) -> State (b,a)
fun retern(a) {
  State (fun (s) { (a,s)  })
}

sig get : State (d,d)
var get = State (fun (s) { (s,s) });

sig put :  (a) -> State(a,())
fun put(s) {
  State (fun (_) { ((), s) })
}


sig fmap : ((a) -> b) -> (State (c,a)) -> State (c,b)
fun fmap(f)(x) {
  x >>= (fun (x) { retern (f(x)) })
} 

sig lift2 : ((a,b) -> c) -> (State (d,a), State (d,b)) -> State(d,c)
fun lift2(f)(x,y) {
  x >>= (fun (x) { y >>= fun (y) { retern(f(x,y)) } })
}

sig pure : (a) -> Formlet(a)
fun pure(v) {
  retern(([], fun (_) { v }))
}

infixr 1 @@@;
sig @@@ : (Formlet (a), Formlet (((a)-> b))) -> Formlet (b)
op m @@@ k {
  m >>= fun((x,c)){
  k >>= fun((y,f)){
  retern((x++y, fun(e){ f(e)(c(e)) }))}}
}

# x @@=> f
#   Returns a formlet that post-processes the formlet x by running its
#   output through f. (This definition is significantly more efficient
#   than the simpler one below.)  (This is fmap for the Formlet functor.)
sig @@=> : (Formlet(a), (a) -> b) -> Formlet(b)
op m @@=> f {
  m >>= fun((x,c)) {
  retern((x, fun (e) { f(c(e)) } )) }
}

# Definition of @@=> in terms of @@@ and pure.
#op m @@=> f {
#  m @@@ pure(f)
#}

sig xml : (Xml) -> Formlet (())
fun xml(x) { retern ( (x, fun (e) { () })) }

sig text : (String) -> Formlet (())
fun text(s) { xml(stringToXml(s)) }

sig plug : ((Xml) -> Xml, Formlet (a)) -> Formlet (a)
op f `plug` m {
  m >>= fun((x,v)){ retern((f(x),v)) }
}

sig makeName : (Int) -> String
fun makeName(i) { "input_" ++ intToString(i) }

sig nextName : State (Int,String)
var nextName = State(fun (i) { (makeName(i), i+1) });

## Alt. def. of nextName
# var nextName = 
#    get >>= fun (i) {
#    var name = makeName(i);
#    put (i+1) >>
#    retern (name)};

#sig formlets : ([Formlet (a)]) -> Formlet ([a])
fun formlets(fs) { 
  switch (fs) {
    case [] -> pure ([])
    case [x] -> x @@=> fun (x) { [x] }
    case (x::xs) -> x @@@ (formlets(xs) @@=> fun(ls)(l) { l::ls } )
  }
}

# A formlet is rendered to become a form, and a handler applied, using the 
# render function
sig render : (Formlet (a), (a) -> Xml) -> Xml
fun render(frm, nextPage) {
   var ((xml, extractor),_) = runState(frm)(0);
   <form enctype="application/x-www-form-urlencoded"
         l:action="{nextPage(extractor(environment()))}" method="POST">
     {xml}
   </form>
}

# Render formlet to a multipart form, which allows file-upload inputs
# (using [inputFile])
sig renderMultipart : (Formlet (a), (a) -> Xml) -> Xml
fun renderMultipart(frm, nextPage) {
   var ((xml, extractor),_) = runState(frm)(0);
   <form enctype="multipart/form-data"
         l:action="{nextPage(extractor(environment()))}" method="POST">
     {xml}
   </form>
}

# Types of input we need to handle:
#   text (done)
#   password (done)
#   checkbox (done)
#   radio (done)
#   submit (done)
#   reset (done)
#   file (done)
#   hidden (done)
#   image
#   button (done)

# A one element String-type formlet can be constructed using the [input]
# function.
sig input : Formlet (String)
var input = 
   nextName >>= fun (name) {
   (retern ((<input name="{name}" />,
             fun (env) { assoc(name, env) })))};

# A formlet for the user to enter a string, which is not revealed on the page.
sig inputPassword : Formlet (String)
var inputPassword = 
   nextName >>= fun (name) {
   (retern ((<input type="password" name="{name}" />,
             fun (env) { assoc(name, env) })))};

sig emptyFormlet : (a) -> Formlet ([b])
fun emptyFormlet(_) { pure([]) }

# A one-element formlet populated with an initial value
sig inputValue : (String) -> Formlet (String)
fun inputValue(v) { 
   nextName >>= fun (name) {
   (retern ((<input name="{name}" value="{v}" />,
             fun (env) { assoc(name, env) })))}
}

# A hidden String formlet; shoudln't normally be needed since you can capture 
# free variables in a [yields] expression
sig hidden : (String) -> Formlet (String)
fun hidden(v) { 
   nextName >>= fun (name) {
   (retern ((<input name="{name}" value="{v}" type="hidden" />,
            fun (env) { assoc(name, env) })))}
}

# A hidden formlet that produces an Int value.
fun hiddenInt(val) {
  formlet <#>{ hidden(intToString(val)) -> rslt }</#>
  yields { stringToInt(rslt) }
}


# A "file" type input.
sig inputFile : Formlet (String)
var inputFile = 
   nextName >>= fun (name) {
   (retern ((<input name="{name}" type="file" />,
             fun (env) { assoc(name, env)})))};

sig inputInt : Formlet(Int)
var inputInt = input @@=> stringToInt;

sig inputIntValue : (Int) -> Formlet(Int)
var inputIntValue = fun (value) { 
  inputValue(intToString(value)) @@=> stringToInt
};

sig inputFloat : Formlet(Float)
var inputFloat = input @@=> stringToFloat;

sig textarea : (String) -> Formlet (String)
fun textarea(value) {
  nextName >>= fun (name) {
    retern ((<textarea name="{name}">{stringToXml(value)}</textarea>,
            fun (env) { assoc(name, env) }))}
}

sig button : (String,[|Submit|Reset|Button|],a) -> Formlet (Maybe(a))
fun button(text, behaviour, v) {
  nextName >>= fun (name) {
    var behaviour = switch (behaviour) {
      case Submit -> "submit"
      case Reset -> "reset"
      case Button -> "button"
    };
    retern ((<button name="{name}" value="here" type="{behaviour}">{stringToXml(text)}</button>,
             fun (env) { if (memassoc(name, env))  Just(v) else Nothing }))
  }
}

sig submitButton : (String,a) -> Formlet (Maybe(a))
fun submitButton(text, v) {
  button(text, Submit, v)
}

sig resetButton : (String,a) -> Formlet (Maybe(a))
fun resetButton(text, v) {
  button(text, Reset, v)
}

sig pushButton : (String,a) -> Formlet (Maybe(a))
fun pushButton(text, v) {
  button(text, Button, v)
}

sig checkbox : Formlet (Bool)
var checkbox =
  nextName >>= fun (name) {
  retern ((<input type="checkbox" name="{name}" value="yes" />,
           fun (env) { (memassoc(name, env)) }))};


# before ++ [selected] ++ after is a list of (value, data) pairs
# layout is a function for rendering a list of (radio button, data) pairs
#
# [NOTE]
#   A default selection is compulsory as recommended by the HTML spec.
#   We should probably do the same for 'choice' (drop-down menus) as well.
#
# It is the users responsibility to ensure that layout produces Xml that
# uses each radio button exactly once and does not introduce any other input
# elements.
#
# The data components are useful for attaching extra data such as labels to
# the radio buttons.
sig inputRadiogroup : ([(String, a)], (String, a), [(String,a)], ([(Xml, a)]) -> Xml) -> Formlet (String) 
fun inputRadiogroup(before, selected, after, layout) {
  nextName >>= fun (name) {
    var before = for (var (value, data) <- before)
                  [(<input type="radio" name="{name}" value="{value}" />, data)];
    var selected = [(<input type="radio" checked="on" name="{name}" value="{selected.1}" />, selected.2)];
    var after = for (var (value, data) <- after)
                  [(<input type="radio" name="{name}" value="{value}" />, data)];
    
    retern ((layout(before ++ selected ++ after), fun (env) { (assoc(name, env))}))
  }
}

sig preludeOption : ((a,String), Bool) -> State(Names,(Xml, (((String) -> [a]) -> (String) -> [a])))
fun preludeOption ((a,b), selected) {
   nextName >>= fun (name) {
	if(selected) {
	   retern ((<option value="{name}" selected="SELECTED">{stringToXml(b)}</option>,
            (fun (k) (key) { if (key == name) a::k(key) else k(key) })))
	}
	else {
	   retern ((<option value="{name}">{stringToXml(b)}</option>,
            (fun (k) (key) { if (key == name) a::k(key) else k(key) })))
	}
}}


sig preludeOptions : ([(a,String)], a) -> State(Names,(Xml, (String) -> [a]))
fun preludeOptions(items, default) {
  switch (items) {
     case [] -> retern ((<#/>, fun (_) { [] }))
     case item::items -> 
       preludeOption(item, (first(item) == default))
                     >>= fun ((xml, r1)) { preludeOptions(items, default)
                     >>= fun ((morexml, r2)) { retern ((xml ++ morexml, r1(r2))) } }
  }
}

sig preludeMultiOptions
     : ([(a,String,Bool)]) -> State(Names,(Xml, (String) -> [a]))
fun preludeMultiOptions(items) {
  switch (items) {
     case [] -> retern ((<#/>, fun (_) { [] }))
     case item::items ->
       preludeOption((first(item),second(item)), third(item))
                     >>= fun ((xml, r1)) { preludeMultiOptions(items)
                     >>= fun ((morexml, r2)) { retern ((xml ++ morexml, r1(r2))) } }
  }
}

sig choice : ([(a,String)]) -> Formlet (a)
fun choice (items) {
  var (default, _) = hd(items);
  nextName >>= fun (name) {
  preludeOptions(items, default) >>= fun ((xml, retrieve)) {
  retern ((<select name="{name}">{xml}</select>,
           fun (env) { hd(retrieve(assoc(name, env))) }))}}
}

sig choiceDefault : ([(a,String)], a) -> Formlet (a)
fun choiceDefault (items, default) {
  nextName >>= fun (name) {
     preludeOptions(items, default) >>= fun ((xml, retrieve)) {
        retern ((<select name="{name}">{xml}</select>,
                 fun (env) { hd(retrieve(assoc(name, env))) }))
     }
  }
}

sig choices : ([(a,String, Bool)]) -> Formlet ([a])
fun choices (items) {
  nextName >>= fun (name) {
     preludeMultiOptions(items) >>= fun ((xml, retrieve)) {
        retern ((<select name="{name}" multiple="multiple">{xml}</select>,
                 fun (env) { concat(map(retrieve, assocAll(name,env))) }))
     }
  }
}

sig choicesNone : ([(a, String)]) -> Formlet ([a])
fun choicesNone (items) {
  choices (map (fun ((v, name)) {(v, name, false)}, items))
}
