KNOWN ISSUES

 * Support for IE is limited.

 * The following web features have not yet been implemented.
   - URLs
   - Arbitrary HTTP headers, response codes
   - Accessibility standards

 * Linked stylesheets don't work (use embedded styles instead).

 * XML support is incomplete, e.g.:
   - Ill-formed XML can sometimes be accepted
   - CDATA literals are not accepted.
   - XML namespaces are not handled.
   - Non-ASCII characters are not handled.

 * The JavaScript compiler compiles lists as arrays, which makes many
standard algorithms on lists very inefficient on the client (e.g. the
complexity of sorting becomes O(n^2 log n) instead of O(n log n)).

 * The effect analysis used to determine whether something is
   convertible to a query fails to detect recursion that sneaks in via
   recursive types.  For example,

     query { (fun (x) { x.unroll(x)})
             ((unroll = (fun (x) { x.unroll(x) }))) }

   is accepted and loops for ever when infer_recursive_types is set to
   "guarded" (the default) or "all".

 * Because strings are represented as character lists, some operations
that cannot be compiled to the database are not caught by the type
checker. For example, the program

     var items = table "items" with (name : String)
                 from database "draggable";
     query {
       for (r <-- items)
        [(l=for (c <- r.name)
             if (c <> 'a') {[c] : String}
             else {""})]
     };

fails at run-time because the query-compiler doesn't know how to
compile the inner for comprehension to the database.

 * Pattern-matching is always typed as being compleable to the
database, but pattern matching on lists compiles to functions hd and
tl that are not yet compileable to the database.

