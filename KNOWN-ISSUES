KNOWN ISSUES

 * Support for IE is limited.

 * The following web features have not yet been implemented.
   - URLs
   - Arbitrary HTTP headers, response codes
   - Accessibility standards

 * Linked stylesheets don't work (use embedded styles instead).

 * XML support is incomplete, e.g.:
   - Ill-formed XML can sometimes be accepted
   - CDATA literals are not accepted.
   - XML namespaces are not handled.
   - Non-ASCII characters are not handled.

 * The JavaScript compiler compiles lists as arrays, which makes many
standard algorithms on lists very inefficient on the client (e.g. the
complexity of sorting becomes O(n^2 log n) instead of O(n log n)).

 * The effect analysis used to determine whether something is
   convertible to a query fails to detect recursion that sneaks in via
   recursive types.  For example,

     sig f : mu a . (((unroll:a)) -> b)
     fun f(x) {x.unroll(x)}
     
     query {f((unroll=f))}

   is accepted and loops for ever.

 * Pattern-matching is always typed as being compileable to the
database, but pattern matching on lists compiles to functions hd and
tl that are not yet compileable to the database.

 * We don't have a proper semantics for database and table values on
the client. If js_hide_database_info is enabled then database and
table statments are all interpreted as the unit value on the
client. This happens to work for all of our examples, and in some
cases prevents database information leaking to the client. It will
fail if a function on the client tries to pass database or table
information to the server. It won't prevent database and table
information from being passed from the server to the client. If
js_hide_database_info is disabled then all of the database information
including the username and password is visible on the client.
