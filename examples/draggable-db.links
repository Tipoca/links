fun step(state, id, items) client {
 receive {
  case GetList(pid)     -> pid ! Items(items); step(state, id, items)
  case SetList(items)   ->
   draw(id, items);
   step(state, id, items)
  case MouseDown(elem)  -> step(Dragging(elem), id, items)
  case MouseUp          -> step(Waiting, id, items)
  case MouseOut(toElem) ->
   switch (state) {
    case Waiting -> step(Waiting, id, items)
    case Dragging(elem) -> 
     if (isElementNode(toElem) && (parentNode(toElem) == getNodeById(id))) {
      var items = permute(items,
                       getTextContent(getValue(firstChild(elem))),
                       getTextContent(getValue(firstChild(toElem))));
       draw(id, items);
      step(Dragging(elem), id, items)
     } else step(Waiting, id, items)
   }
 } 
}

fun permute(items, name1, name2) {
 for (var item <- items) {
  if (item == name1) [name2]
  else if (item == name2) [name1]
  else [item]
 }
}

fun draw(id, items) {
 replaceChildren(
  for (var item <- items) <li>{stringToXml(item)}</li>,
  getNodeById(id)
 )
}

fun draggableList(id, items) client
{
  var dragger = spawn { step(Waiting, id, items) };

  (<ul id="{id}"
       l:onmouseup   = "{dragger ! MouseUp}"
       l:onmousedown = "{dragger ! MouseDown(getTarget(event))}"
       l:onmouseout  = "{dragger ! MouseOut(getToElement(event))}">
    {for (var item <- items) <li>{stringToXml(item)}</li>}
   </ul>,
   fun () {dragger ! GetList(self());
           receive {
             case Items(items) -> items
          }},
   fun (items) {dragger ! SetList(items);}
   )
}


### library functions ###
fun select(xs, i) {
  hd(drop(i, xs))
}
### end of library functions ###


fun itemsTable() server {
  table "items" with (i : Int, name : String)
    from (database "draggable")
}

fun load() server {
  for (var item <-- itemsTable())
    orderby (item.i)
    [item.name]
}

fun save(itemsList) server {
  update (var itemEntry <-- itemsTable())
    set (i=itemEntry.i, name=(select(itemsList, itemEntry.i)));
}


fun main() client {
  var (bears, read, write) = draggableList("bears", load());
 
  replaceDocument(
    <html><body>
      <h2>Great Bears</h2>{bears}
      <input type="button" value="load" l:onclick="{spawn {write(load())}}"/>
      <input type="button" value="save" l:onclick="{spawn {save(read())}}"/>
    </body></html>
  )
}

main()
