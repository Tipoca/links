var db = database "winestore";

var page_size = 12;

var usersTable = table "users"
                  with (cust_id : Int, user_name : String, 
                        password : String) from db;

var orderTable = table "orders"
                  with (cust_id : Int, order_id : Int, date : String,
                        instructions : String, creditcard : String,
                        expirydate : String)
                   from db;

var shortOrderTable = table "orders"
                       with (cust_id : Int, order_id : Int)
                   from db;

var cartItemsTable = table "items"
                      with (item_id : Int, cust_id : Int, order_id : Int, 
                            price : Float, qty : Int,
                            wine_id : Int)
                      from db;

var wineTable = table "wine" 
                 with (wine_id : Int, wine_name : String, wine_type : Int,
                       year : Int, winery_id : Int)
                 from db;

var wineTypeTable = table "wine_type" 
                     with (wine_type_id : Int, wine_type : String)
                     from db;

var regionTable = table "region"
                  with (region_id : Int, region_name : String)
                  from db;

var inventoryTable = table "inventory" with
                     (wine_id : Int, cost : Float)
                     from db;

var wineryTable = table "winery" with 
                  (winery_id : Int, winery_name : String,
                  region_id : Int)
                  from db;

fun snd((a,b)) { b }

fun fst((a,_)) { a }

fun map_comprehension(f, l) {
  for (var x <- l) [f(x)]
}

fun range(n) {
  if (n==0) [0] else
  range(n-1) ++ [n]
}

fun floatToXml(x) { stringToXml(floatToString(x)) } 

fun sum_float(l) {
  switch (l) {
    case [] -> 0.
    case hd::tl -> hd +. sum_float(tl)
  }
}

fun sum_int(l) {
  switch (l) {
    case [] -> 0
    case hd::tl -> hd + sum_int(tl)
  }
}

fun maximum(result, l) {
  switch (l) {
    case [] -> result
    case hd::tl -> if (result >= hd)  
                       maximum(result, tl)
                   else
                       maximum(hd, tl)
  }
}


fun minimum(result, l) {
  switch (l) {
    case [] -> result
    case hd::tl -> if (result <= hd)  
                       maximum(result, tl)
                   else
                       maximum(hd, tl)
  }
}

fun assocd(x, l, d) {
  switch (l) {
    case [] -> d
    case (k,v)::tl -> if (x == k) v
                      else assocd(x, tl, d)
  }
}

fun wineTypeName(wine_type_id) {
  for (var wineType <-- wineTypeTable)
  where (wineType.wine_type_id == wine_type_id)
    stringToXml(wineType.wine_type)
}

fun cust_id_next() {  # WARNING: race condition here
  var ids = for (var u <-- usersTable)
              [u.cust_id];
  maximum(0, ids) + 1
}

fun claimCart(order_id, cust_id) {
  # Should we guard this to only claim carts with cust_id = -1?
  update (var x <-- cartItemsTable)
   where (x.order_id == order_id)
     set (item_id = x.item_id,
          cust_id = cust_id,
          order_id = x.order_id,
          price = x.price,
          qty = x.qty,
          wine_id = x.wine_id);
#     set (cust_id = cust_id);
  update (var x <-- orderTable)
   where (x.order_id == order_id)
     set (cust_id = cust_id,
          order_id = x.order_id,
          date = x.date,
          instructions = x.instructions,
          creditcard = x.creditcard,
          expirydate = x.expirydate)
#     set (cust_id = cust_id)
}

sig sign_up : (Int, String, String) -> Xml

fun sign_up(order_id, username, password)  {
  var new_cust_id = cust_id_next();
  insert (usersTable) values
    [( cust_id = new_cust_id, user_name = username, password = password )];
  if (order_id <> -1)
    claimCart(order_id, new_cust_id) else ();
  freshResource();
  <div>
    Welcome, {stringToXml(username)}!
    <a l:href="{search_results(new_cust_id, order_id, 1, 1, 0)}">Continue shopping</a>
  </div>
}

fun sign_up_form(order_id) {
  <html>
    <form l:action="{sign_up(order_id, username, password)}">
      <table>
        <tr><td>
          Username:</td><td> <input type="text" l:name="username" />
        </td></tr>
        <tr><td>
          Password:</td><td> <input type="password" l:name="password" />
        </td></tr>
        <tr><td>
          </td><td> <input type="submit" value="Sign Up" />
        </td></tr>
      </table>
    </form>
  </html>
}

fun sign_in(order_id, username, password) {
  var cust_id = 
    for (var u <-- usersTable)
    where (u.user_name == username &&
           u.password == password)
      [u.cust_id];    

  if (cust_id == [])
    errorPage("Incorrect username/password combination")
  else {
    var cust_id = hd(cust_id);
    if (order_id <> -1)
      claimCart(order_id, cust_id)
    else ();
    search_results(cust_id, order_id, 1, 1, 0)
  }
}

fun sign_in_form(order_id) {
  <html>
    <form l:action="{sign_in(order_id, username, password)}">
      Enter your username and password here:
      <table>
        <tr><td>
          Username:</td><td> <input type="text" l:name="username" />
        </td></tr>
        <tr><td>
          Password:</td><td> <input type="password" l:name="password" />
        </td></tr>
        <tr><td>
        </td> <td> <input type="submit" value="Sign in" />
        </td></tr>
      </table>
    </form>
  </html>
}

fun logout() {
   search_results(-1, -1, 1, 1, 0)
}

fun errorPage(msg) {
  <h1>Sorry, an error occured</h1>
  <p>{stringToXml(msg)}</p>
}

fun customerName(cust_id) {
  for (var cust <-- usersTable)
  where (cust.cust_id == cust_id)
    stringToXml(cust.user_name)
}

sig header : (Int, Int) -> Xml

fun header(cust_id, order_id) {
  if (cust_id == -1)
    <div align="right">
      <a l:href="{sign_in_form(order_id)}">Sign in</a> or
      <a l:href="{sign_up_form(order_id)}">create an account</a>.
    </div>
  else
    <div align="right">Welcome, {customerName(cust_id)}.
         <a l:href="{logout()}">Logout</a></div>
}

fun footer(cust_id) {
  <div />
}

fun valid_cc_details(card_no, expiry) {
  card_no == "8000000000001001"
}

fun purchase_confirmation(cust_id, order_id, total) {
  debug("arrived at purchase confirmation with " ++ intToString(cust_id)
        ++ " " ++ intToString(order_id) ++ " " ++ floatToString(total));
  <html>
    <h1>Success!</h1>
    <p>Thanks, {if (cust_id <> -1) customerName(cust_id) else []},
    your order has been dispatched. Your order reference number is
    {intToXml(cust_id)} - {intToXml(order_id)}.
    Please quote this number in any correspondence.</p>

    <p>If it existed, the order would have been shipped to:
    <blockquote>(Insert shipping details)</blockquote></p>

    We have billed your fictional credit card.
    <table width="100%">
      <tr>
        <td> Quantity </td>
        <td> Wine </td>
        <td> Unit Price </td>
        <td> Total </td>
      </tr>
      {
        for (var item <-- cartItemsTable)
          for (var wine <-- wineTable)
            where (item.wine_id == wine.wine_id && item.order_id == order_id)
              <tr>
                <td> {intToXml(item.qty)} </td>
                <td> {stringToXml(wine.wine_name)} </td>
                <td> {floatToXml(item.price)} </td>
                <td> {floatToXml(item.price *. intToFloat(item.qty))} </td>
              </tr>
      }
    <tr>
     <td colspan="3">Total of this order</td> 	<td>{floatToXml(total)}</td>
    </tr>
    </table>

    <p>An email confirmation has NOT been sent to you. Thank you for shopping 
    with Linkswine.</p>
    Return to <a l:href="{search_results(cust_id, -1, 1, 1, 0)}">main page</a>.
  </html>
}

sig order_total : (Int, Int) -> Float
fun order_total(cust_id, order_id) {
  sum_float(
    for (var item <-- cartItemsTable)
    where (item.cust_id == cust_id && item.order_id == order_id)
      [item.price]
  )
}

fun getOrder(cust_id, order_id) {
  var the_orders = 
    for (var x <-- orderTable )
    where (cust_id == x.cust_id && order_id == x.order_id)
      [x];
  switch (the_orders) {
    case [] -> None
    case (order::_) -> Some(order)
  }
}

fun checkout(cust_id, order_id, card_no, expiry, instr) {
  if (cust_id == -1) 
    errorPage("You must have an account to make a purchase!")
  else {
    var total = order_total(cust_id, order_id);
    if (valid_cc_details(card_no, expiry)) {
      var the_order = getOrder(cust_id, order_id);
      switch (the_order) {
        case None -> errorPage("Internal error: You have no shopping cart")
        case Some(order) -> {
          update (var x <-- orderTable)
           where (x.order_id == order_id && cust_id == x.cust_id)
             set (cust_id = order.cust_id,
                  order_id = order.order_id,
                  date = order.date,
                  instructions = instr,
                  creditcard = card_no,
                  expirydate = expiry);
          debug("successfully updated the order with purchase details.");
          freshResource();
          purchase_confirmation(cust_id, order_id, total)
        }
      }
    } else
      errorPage("Bogus credit card details!")
  }
}

fun begin_checkout(cust_id, order_id) {
  <html>
    <h1>Finalize Your Order</h1>

      <div>Please enter your SurchargeCard details (Try: 8000000000001001 )
        and delivery instructions. Fields shown in red are mandatory.</div>
      <form method="POST" l:action="{checkout(cust_id, order_id, card_no, expiry, instr)}">
      <table>
        <tr><td align="right">
          SurchargeCard: 	
        </td><td>
          <input type="text" l:name="card_no" value="" />
        </td></tr>
        <tr><td align="right">
          Expiry Date (mm/yy): 	
        </td><td>
          <input type="text" l:name="expiry" value="" />
        </td></tr>
        <tr><td align="right">
          Delivery Instructions: 	
        </td><td>
          <input type="text" l:name="instr" value="" />
        </td></tr>
        <tr><td align="right">
        </td><td>
          <input type="submit" value="Purchase" />
        </td></tr>
      </table>
      </form>
  </html>
}

fun cart_itemlist(cust_id, order_id) {
  debug("starting cart_itemlist");

  var cart_items = 
    for (var cart_item <-- cartItemsTable)
    where (cart_item.order_id == order_id &&
           cart_item.cust_id == cust_id)
    {
        for (var wine <-- wineTable)
        where (wine.wine_id == cart_item.wine_id)
        {
            for (var cost_rec <-- inventoryTable)
            where (cost_rec.wine_id == wine.wine_id)
              [(wine.wine_name, cost_rec.cost)]
        }
    };
    debug("got results in cart_items");
    if (length(cart_items) == 0)
      <p>Your cart is empty.</p>
    else {
      var total_cost = floatToString(sum_float(map(snd, cart_items)));
      var total_items = intToString(length(cart_items));
      <table width="100%">
           <tr>
             <th> Quantity </th>
             <th> Wine </th>
             <th align="right"> Unit Price </th>
             <th align="right"> Total </th>
           </tr>
        {for (var item <- cart_items)
           <tr>
             <td> 1 </td>
             <td> {stringToXml(item.1)} </td>
             <td align="right"> ${stringToXml(floatToString(item.2))} </td>
             <td align="right"> ${stringToXml(floatToString(item.2))} </td>
           </tr>
        }
        <tr>
          <td></td>
          <td></td>
          <td></td>
          <td align="right"> ${stringToXml(total_cost)} </td>
        </tr>
      </table> ++
      {if (cust_id <> -1)
        <form method="POST" l:action="{begin_checkout(cust_id, order_id)}">
          <input type="submit" value="Check out" />
        </form>
       else {<div>To make a purchase, you must be a member. 
               You may <a l:href="{sign_in_form(order_id)}">sign in</a> or
                 <a l:href="{sign_up_form(order_id)}">create an account</a> 
                  </div>}
      }
    }
}

fun wine_name(wine_id) {
  var matches = 
      for (var wine <-- wineTable)
      where (wine.wine_id == wine_id)
        [wine.wine_name];
  hd(matches)
}

fun get_region_name(region_id) {
  for (var region <-- regionTable)
  where (region_id == region.region_id)
    region.region_name
}

fun get_wine_price(wine_id) {
  hd(for (var cost_rec <-- inventoryTable)
     where (wine_id == cost_rec.wine_id) 
       [cost_rec.cost])
}

fun show_cart(cust_id, order_id, msg) {
  <html>
    <h1>Your Shopping Cart</h1>
    <div>
      {stringToXml(msg)}
    </div>
    <div>
      {cart_itemlist(cust_id, order_id)}
    </div>
    <a l:href="{search_results(cust_id, order_id, 1, 1, 0)}">Continue shopping</a>
  </html>
}

sig cartStats : (Int, Int) -> (Float, Int)
fun cartStats(cust_id, order_id) {
  var cart_items = 
    for (var cart_item <-- cartItemsTable)
    where (cart_item.order_id == order_id &&
           cart_item.cust_id == cust_id)
    {
        for (var wine <-- wineTable)
        where (wine.wine_id == cart_item.wine_id)
          for (var cost_rec <-- inventoryTable)
          where (wine.wine_id == cost_rec.wine_id)
            [(cart_item.qty, cost_rec.cost)]
    };
  var total_cost = sum_float(map(snd, cart_items));
  var total_items = sum_int(map(fst, cart_items));
  (total_cost, total_items)
}

fun add_to_cart(cust_id, order_id, wine_id) {
  var price = get_wine_price(wine_id);
  var max_item_id = maximum(0, for (var cart_item <-- cartItemsTable)
                           where (cart_item.order_id == order_id
                               && cart_item.cust_id == cust_id)
                                 [cart_item.item_id]
                        );
  var new_item_id = max_item_id + 1;
        
  insert (cartItemsTable) values
        [( cust_id = cust_id,
           order_id = order_id,
           item_id = new_item_id,
           wine_id = wine_id,
           qty = 1,
           price = price )];

  freshResource();
 
  show_cart(cust_id, order_id,
            "Added " ++ wine_name(wine_id) ++ " to your cart.")
}

fun sessionCart() {
  (stringToInt(getCookie("cust_id")), stringToInt(getCookie("order_id")))
}

# create_cart: make a new cart
fun create_cart(cust_id) {
  var orders = for (var cart <-- shortOrderTable)
             [cart.order_id];
  var order_id = 1 + maximum(0, orders);
  insert (shortOrderTable) values 
         [(cust_id = cust_id, order_id = order_id)];
  setCookie("order_id", intToString(order_id));
  setCookie("cust_id", intToString(cust_id));
  (order_id, cust_id)
}

fun wine_listing(cust_id, order_id, region_id, wine_type, page) {
  var negone = -1;
  var result = 
    take(page_size, drop(page * page_size,
    for (var wine <-- wineTable )
    where (wine_type == 1 || wine.wine_type == wine_type)
    {
      for (var winery <-- wineryTable)
         where (winery.winery_id == wine.winery_id
                && (region_id == 1 || winery.region_id == region_id))
         { 
             for (var cost_rec <-- inventoryTable)
             where (wine.wine_id == cost_rec.wine_id)
               [(wine.wine_id, wine.wine_name, cost_rec.cost,
                 wine.year, winery.winery_name)]
         }
    }));

  var (order_id, cust_id) = 
    if (order_id <> -1) (order_id, cust_id)
    else create_cart(cust_id);

  # create_cart is idempotent, so we don't need freshResource here.

  for (var (id, name, cost, year, winery) <- result)
  {
      <li>{stringToXml(intToString(year))} {stringToXml(winery)} {stringToXml(name)} <br/>
          <b>Our price</b>: ${floatToXml(cost)} (${floatToXml(cost *. 12.)} a dozen)
          <a l:href="{add_to_cart(cust_id, order_id, id)}">Add to cart</a>
      </li>
  }
}


fun wine_count(region_id, wine_type) {
  var result = 
    for (var wine <-- wineTable)
    where (wine_type == 1 || wine.wine_type == wine_type)
    {
      for (var winery <-- wineryTable)
         where (winery.winery_id == wine.winery_id
                && (region_id == 1 || winery.region_id == region_id))
         { 
             for (var cost_rec <-- inventoryTable)
             where (wine.wine_id == cost_rec.wine_id)
               [(wine.wine_id, wine.wine_name, cost_rec.cost,
                 wine.year, winery.winery_name)]
         }
    };
   length(result)
}

fun deadend() {
   <html>deadend</html>
}

fun cartSummary(cust_id, order_id) {
  var (total, count) = cartStats(cust_id, order_id);
  <div>
    <a l:href="{show_cart(cust_id, order_id, "")}">
    <img border="0" src="cart_off.jpg"  align="middle" /></a>
    Total in cart: ${floatToXml(total)} 
      ({intToXml(count)} items)
     <a l:href="{show_cart(cust_id, order_id, "")}">View cart</a>.
  </div>
}

sig search_results : (Int, Int, Int, Int, Int) -> Xml

fun search_results(cust_id, order_id, region_id, wine_type, page) {
  var numWines = wine_count(region_id, wine_type);
  var numPages = numWines/page_size;
  var winesOnThisPage = minimum(page_size, [numWines - (page) * page_size]);
  <html>
    {header(cust_id, order_id)}
    {cartSummary(cust_id, order_id)}
    <form method="POST" l:action="{search_results(cust_id, order_id,
                                                  stringToInt(search_region_id),
                                                  stringToInt(search_wine_type),
                                                  page)}">
      <h2>Filter wines by </h2>
      <table>
        <tr><td>Region:</td>
          <td><select l:name="search_region_id">
                {for (var region <-- regionTable)
                   # (boutrosed)
                   if (region_id == region.region_id)
                     <option selected="SELECTED" 
                        value="{intToString(region.region_id)}">{stringToXml(region.region_name)}</option>
                   else
                     <option 
                        value="{intToString(region.region_id)}">{stringToXml(region.region_name)}</option>
                }
              </select>
          </td></tr>
        <tr><td>Wine type:</td>
           <td><select l:name="search_wine_type">
                {for (var type <-- wineTypeTable)
                   # (boutrosed)
                   if (wine_type == type.wine_type_id)
                     <option selected="SELECTED" 
                        value="{intToString(type.wine_type_id)}">{stringToXml(type.wine_type)}</option>
                   else
                     <option 
                        value="{intToString(type.wine_type_id)}">{stringToXml(type.wine_type)}</option>
                }
               </select>
          </td></tr>
       </table>
       <input type="submit" value="Show wines" />
    </form>
    <h1>Wines for region {stringToXml(get_region_name(region_id))},
        {wineTypeName(wine_type)}</h1>
    Page {intToXml(page+1)} of {intToXml(numPages)}
    <ul>
      {wine_listing(cust_id, order_id, region_id, wine_type, page)}
    </ul>
    Showing wines {intToXml(page_size*page+1)} thru {intToXml(page_size*page+winesOnThisPage)}.<br />
    {if (page <> 0)
      <a l:href="{search_results(cust_id, order_id, region_id, wine_type, page-1)}">Previous</a> else []}
    {for (var i <- range(numPages-1)) {
       (if (i == page) {intToXml(i+1)}
       else 
         <a l:href="{search_results(cust_id, order_id, region_id, wine_type, i)}">{intToXml(i+1)}</a>)
       ++ <span> </span> 
    }}
    {if (page <> numPages)
      <a l:href="{search_results(cust_id, order_id, region_id, wine_type, page+1)}">Next</a> else []
    }
    {footer(cust_id)}
  </html>
}

sig main : () -> Xml

fun main() {
  search_results(-1, -1, 1, 1, 0)
}

main()
