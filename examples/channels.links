typename Channel (a) = ((() -> a), ((a) -> ()));

sig newChannel : () -> Channel (a)
fun newChannel() {
  var p =
    spawn {
      fun step(vs, readers) {
        receive {
          case Value(v) ->
            var (v :: vs) = vs ++ [v];
            switch (readers) {
              case [] -> step (v :: vs, readers)
              case (r :: readers) -> r ! v; step (vs, readers)
            }
          case Read(r) ->
            var (r :: readers) = readers ++ [r];
            switch (vs) {
              case [] -> step (vs, r :: readers)
              case (v :: vs) -> r ! v; step (vs, readers)
            }
        }
      }
      step([], [])
    };

  fun write(v) {
    p ! Value(v)
  }

  fun read() {
    spawnWait {
      p ! Read(self());
      receive { case v -> v }
    }
  }

  (read, write)
}

sig gett : (Channel (a)) -> a
fun gett ((read, _)) { read() }

sig putt : (Channel (a), a) -> ()
fun putt((_, write), v) { write(v) }
