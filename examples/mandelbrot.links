# adapted from http://www.timestretch.com/FractalBenchmark.html

var bailout = 16.;
var max_iterations = 200;

# process associated with a canvas.  Receive Point messages and render
# them on the screen using 2x2 div elements.
fun draw(colour, id) client {
  receive {
    case Point(x,y) -> {
     dom ! AppendChild (
               id=id,
               replacement=<div style="position: absolute;
                                       background-color: {colour}; 
                                       width: 2px;
                                       height: 2px;
                                       left: {string_of_int(2*x)}px;
                                       top: {string_of_int(2*y)}px"> </div>)
    };
  };
  draw(colour, id);
}

# Create a canvas and return its process id to the calling process.
# The canvas can receive messages of the form Point (x,y)
fun canvas (x, y, colour, id) {
  dom ! AppendChild (id="body",
                     replacement=<div id="{id}"
                                      style="position: relative; float: left; width: {string_of_int(2*x)}px;
                                             height: {string_of_int(2*y)}px"> </div>);
  spawn{ draw(colour, id) }
}

fun range(f, to) {
  if (f >= to) []
  else f :: range(f+1, to)
}

fun mandelbrot(x, y) {
  var cr = y -. 0.5;
  var ci = x;
  var zi = 0.0;
  var zr = 0.0;
  var i = 0;
  fun loop(zr, zi, i) {
      var i = i + 1;
      var temp = zr *. zi;
      var zr2 = zr *. zr;
      var zi2 = zi *. zi;
      var zr = zr2 -. zi2 +. cr;
      var zi = temp +. temp +. ci;
      if (zi2 +. zr2 > bailout)  i
      else if (i > max_iterations) 0
      else loop(zr, zi, i)
  }
  loop(zr, zi, i)
}

fun makefreshname(colour, n) client {
  var name = colour++string_of_int(n);
  # HACK: we should really use domGetRefById
  # but that doesn't yet return an option type
  switch(elementById(name)) {
    case Some x -> makefreshname(colour, n+1);
    case None -> name;
  }
}

fun getfreshid(colour) {
  makefreshname(colour, 0);
}

fun iterate(colour) client {
  var id = getfreshid(colour);
  var c = canvas (80, 80, colour, id);
  for (y <- range(-39, 39)) {
    for (x <- range(-39,39)) {
      (if (mandelbrot(float_of_int(x)/.40.0, float_of_int(y)/.40.0) == 0) (c ! Point (x+39,y+39))
       else ()); []
    }; []
  }
}

var colours = ["red", "green", "blue", "black", "orange", "purple"];

<html>
 <body>
  <select l:onchange="{iterate(evtGetTargetValue(event))}"
	style="display: block">
    {for (colour <- colours)
       <option>{enxml(colour)}</option>}
  </select>
  <div id="body"/>
 </body>
</html>


