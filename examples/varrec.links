# Encoding polymorphic records using polymorphic variants

# Translation on types
# (l1:t1, ..., ln:tn)
# -->
# [|l1:t1 -> a| ... | ln:tn -> a | b |] -> a

# Could we make this type work?
# [|l1:(t1 -> a) -> a |  ... | ln:(tn -> a) -> a | b |] -> a

fun unit(e : [| |]) {
 error ("unreachable, if typing works")
}

fun add_a(r)(e) {
  switch e {
   case A(f) -> f(1)
   case z -> r(z)
  }
}

fun add_b(r)(e) {
  switch e {
   case B(f) -> f("b")
   case z -> r(z)
  }
}

fun r(x) { add_a(add_b(unit))(x) }

fun id(x) {x}

fun r .# l { r(l) }

(r .# A(id), r .# B(id))

# Open problem: (how) can we encode label deletion?
