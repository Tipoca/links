typename Date = [|Date:(Int,Int)|];
typename BookingInfo = (person:String, age:Int, arrival:Date, departure:Date);

sig date : Form(Date)
var date = 
  form
    <#>
      { inputInt -> day } / { inputInt -> mo } 
    </#>
  yields Date(day, mo);


sig dateToXml : Date -> Xml
fun dateToXml((Date(d,m))) { <em>{intToXml(d)}/{intToXml(m)}</em> }

sig label : String -> Form (a) -> Form(a)
fun s `label` m {
  text(s) @@@
  m @@@
  pure( fun(v)(_){ v } )
}

sig travelForm : Form(BookingInfo)
var travelForm =
  form
    <table>
     <tr>
           <td>Person:</td> <td> { input -> person } </td>
     </tr>
     <tr>
              <td>Age:</td> <td> { inputInt -> age } </td>
     </tr>
     <tr>
         <td> Arrival:</td> <td> { date -> arr } </td>
     </tr>
     <tr>
       <td> Departure:</td> <td> { date -> dep }</td>
     </tr>
    </table>
  yields 
    (person=person, age=age, arrival = arr, departure = dep);

sig showBookingInformation : BookingInfo -> Xml
fun showBookingInformation((person=p, age=a, arrival=arr, departure=dep)) {
   <html>
     <h1>Results</h1>
     <p>
       You are {stringToXml(p)},  {intToXml(a)} years old.<br/>
       You'll arrive on {dateToXml(arr)}
       and leave on {dateToXml(dep)}.
     </p>
   </html>
}

sig sequenceForms : [Form (a)] -> Form ([a])
fun sequenceForms(forms) { 
  switch (forms) {
    case [] -> pure ([])
    case (x::xs) -> x @@@ (sequenceForms(xs) @@@ pure (fun(ls)(l) { l::ls}))
  }
}

sig sumNumbers : [Int] -> Int
fun sumNumbers(numbers) {
  fun aux(numbers, total) {
    switch (numbers) {
       case [] -> total
       case n::nums -> aux(nums, n + total)
    }
  }
  aux(numbers, 0)
}

sig enterNumbers : Int -> Xml
fun enterNumbers(n) {
  <html>
    <h1>Enter {intToXml(n)} numbers:</h1>
    {render(sumNumbers)(sequenceForms(repeat(n)((inputInt))))}
  </html> 
}

<html>
   <h1>Date:</h1>
   {render(showBookingInformation)(travelForm)}
   <h1>Multiple</h1>
   Enter numbers: {render(enterNumbers)(inputInt)}
</html>
