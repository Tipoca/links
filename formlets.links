#### FORMLETS ####
####   A library of functions supporting the 'formlet ... yields ...' syntax
####   TBD: move to a namespaced module

####   NOTE: top-level vars have been eta-expanded in order to tell
####   the JS compiler that they are pure and hence can be safely
####   compiled. If we had a purity analysis then all of these could
####   be safely eta-reduced again.

typename Env = [(String,String)];
typename Gen = Int;
typename State (d,a) = (d) -> (a,d);
typename Collector (a) = (Env) -> a;
typename CheckedCollector (a) = Collector((Xml, Maybe(a)));
typename Formlet (a) = State (Gen, (Xml, CheckedCollector(a)));
typename XmlContext = (Xml) -> Xml;

typename Attributes = [(String, String)];

# attributes for a multipart form
var multipart = [("enctype", "multipart/form-data")];

infixr 0 $;
sig $ : ((a) -> b, a) -> b
op f $ x { f(x) }

# state monad
sig runState : (State (d,a), d) -> (a,d)
fun runState(s, i) { s(i) }

infixl 1 >>=;
sig >>= : (State (d,a), (a) -> State(d,b)) -> State (d,b)
op x >>= f {
   (fun (s1) { var (v,s2) = x (s1); runState (f (v), s2) })
}

sig return : (a) -> State (b,a)
fun return(a) { fun (s) { (a,s) } }

sig fmap : ((a) -> b, State (c,a)) -> State (c,b)
fun fmap(f, x) { x >>= return `compose` f } 

sig pure : (a) -> Formlet(a)
fun pure(v) {
  return(([], fun (_) { ([], Just (v)) }))
}

sig pureE : (a) -> Maybe (a)
fun pureE (x) { Just (x) }

sig applyE : (Maybe ((a) -> b), Maybe (a)) -> Maybe (b)
fun applyE (f, x) {
  switch ((f, x)) {
    case (Just (f), Just (x)) -> Just (f(x))
    case (_       , _       ) -> Nothing    
  }
}

infixr 1 @@@;
sig @@@ : (Formlet (a), Formlet ((a)-> b)) -> Formlet (b)
op m @@@ k {
  m >>= fun((x,c)){
  k >>= fun((y,f)){
  return((x++y, 
          fun(e){ 
                  var (fx, f) = f(e);
                  var (cx, c) = c(e);
                  (cx++fx,  f `applyE` c) 
         }))}}
}

# x @@=> f
#   Returns a formlet that post-processes the formlet x by running its
#   output through f.   (This is fmap for the Formlet functor.)
#   (This could be written more efficiently.)
sig @@=> : (Formlet(a), (a) -> b) -> Formlet(b)
op m @@=> f {
  m @@@ pure(f)
}

sig xml : (Xml) -> Formlet (())
fun xml(x) { return ( (x, fun (e) { (x, pureE(())) })) }

sig text : (String) -> Formlet (())
fun text(s) { xml(stringToXml(s)) }

sig plug : (XmlContext, Formlet (a)) -> Formlet (a)
op f `plug` m {
  m >>= fun((x,collector)){ return((f(x),
    fun (env) { var (xml,c) = collector (env); 
                (f(xml), c) }))}
}

sig makeName : (Int) -> String
fun makeName(i) { "input_" ++ intToString(i) }

sig nextName : State (Int,String)
var nextName = fun (i) { (makeName(i), i+1) };

sig formlets : ([Formlet (a)]) -> Formlet ([a])
fun formlets(fs) { 
  switch (fs) {
    case []    -> formlet <#/> yields []
    case [x]   -> formlet <#>{x -> f}</#> yields [f]
    case x::xs -> formlet <#>{x -> f}{formlets(xs) -> fs}</#> yields f::fs
  }
}

# Page stuff

typename RecForms = [mu a.(([a]) -> Xml)];
typename MultiXmlContext = ([Xml]) -> Xml;

typename CheckedFormBuilder = (MultiXmlContext, RecForms, Int) -> Xml;
typename Page = (Int, MultiXmlContext, (Gen) -> ([CheckedFormBuilder], Gen));
typename Handler (a) = (a) -> Page;

sig unitP : Page
var unitP = (0, fun ([]) {<#/>}, fun (gen) {([], gen)});

sig joinP : (Page, Page) -> Page
fun joinP((i1, k1, fs1), (i2, k2, fs2)) {
  (i1+i2,
   fun (xs) {
     <#>{k1(take(i1, xs))}{k2(drop(i1, xs))}</#>
   },
   fun (gen) {
     var (ms1, gen) = fs1(gen);
     var (ms2, gen) = fs2(gen);
     (ms1 ++ ms2, gen)
   })
}

sig joinManyP : ([Page]) -> Page
fun joinManyP(gs) {
  fold_left(joinP, unitP, gs)
}

sig bodyP : (Xml) -> Page
fun bodyP(xml) {
  (0, fun ([]) {xml}, fun (gen) {([], gen)})
}

sig plugP : (XmlContext, Page) -> Page
fun plugP(context, (i, k, fs)) {
  (i, fun (xs) {context(k(xs))}, fs)
}

sig formP : (Formlet(a), Handler(a), Attributes) -> Page
fun formP(f, h, attributes) {
  (1,
   fun ([x]) {x},
   fun (gen) {
     var ((x, c), gen) = runState(f, gen);
     ([mkCheckedFormBuilder(x, c, h, attributes)], gen)
   })
}

sig pickleCont : (() -> Page) -> String
fun pickleCont(cont) {unsafePickleCont(fun (_) {cont()})}

sig mkForm : ((Env) -> Page, Xml, Attributes) -> Xml
fun mkForm(cont, contents, attributes) {
  <form enctype="application/x-www-form-urlencoded"
        action="#" method="POST" {attributes}>
    <input type="hidden"
           name="_k"
           value="{pickleCont(fun () {cont(environment())})}" />
    {contents}
  </form>
}

sig renderPage : (Page) -> Xml
fun renderPage((n, k, fs)) {
  var (ms, _) = fs(0);
  var zs = mapi(fun (m, i)(zs) {m(k, zs, i)}, ms);
  k(map (fun (z) {z(zs)}, zs))
}

sig mkCheckedFormBuilder : (Xml, CheckedCollector(a), Handler(a), Attributes) -> (MultiXmlContext, RecForms, Int) -> Xml
fun mkCheckedFormBuilder(x, c, h, attributes)(k, zs, i) {
  mkForm(validate(c, h, k, zs, i, attributes), x, attributes)   
}

sig validate :
  (CheckedCollector (a), Handler (a), MultiXmlContext, RecForms, Int, Attributes) -> (Env) -> Page
fun validate(c, h, k, zs, i, attributes) (env) {
  var (xml, v) = c(env);
  switch (v) {
    case Just(v) -> h(v)
    case Nothing  -> {
      fun z(zs) {
        mkForm(validate(c, h, k, zs, i, attributes), xml, attributes)
      }
      var zs = substAt(zs, i, z);
      bodyP(k(map (fun (z) {z(zs)}, zs)))
    }
  }
}
# end of pagelet stuff

# Types of input we need to handle:
#   text (done)
#   password (done)
#   checkbox (done)
#   radio (done)
#   submit (done)
#   reset (done)
#   file (done)
#   hidden (done)
#   image
#   button (done)

# A one element String-type formlet can be constructed using the [input]
# function.

fun mkInput(mkXml,mkFilledXml) {
  nextName >>= fun (name) {
    (return ((mkXml(name),
              fun (env) { var v = assoc (name, env);
                          (mkFilledXml(name,v), pureE (v)) })))}
}

sig input : Formlet (String)
var input = fun (gen) {
              mkInput(fun(name) { <input name="{name}"/> },
                      fun(name,v) { <input name="{name}" value="{v}"/> })(gen)
            };

# QUESTION:
#   Should we change the semantics of attribute expressions such that
#   they *do not* override literal attributes?
#
#   An advantage of doing this would be that we wouldn't have to use
#   removeAssoc in formlet library functions. A disadvantage is that
#   this wouldn't correspond with the usual update semantics.

# input with attributes
sig inputA : (Attributes) -> Formlet (String)
fun inputA(attributes) {
  mkInput(fun(name) { <input name="{name}" {removeAssoc("name", attributes)}/> },
          fun(name,v) { <input name="{name}" value="{v}" {removeAssoc("name", removeAssoc("value", attributes))}/> })
}

# A formlet producing a String whose contents are hidden on entry.
sig inputPasswordA : (Attributes) -> Formlet (String)
fun inputPasswordA(attributes) {
  inputA(("type", "password")::removeAssoc("type", attributes))
}

# A one-element formlet populated with an initial value
sig inputValueA : (String, Attributes) -> Formlet (String)
fun inputValueA(v, attributes) {
  inputA(("value", v)::removeAssoc("value", attributes))
}

# A "file" type input.
sig inputFileA : (Attributes) -> Formlet (String)
fun inputFileA(attributes) {
  inputA(("type", "file")::removeAssoc("type", attributes))
}

# A formlet producing a String whose contents are hidden on entry.
sig inputPassword : Formlet (String)
var inputPassword = fun (gen) {inputPasswordA([])(gen)};

# A one-element formlet populated with an initial value
sig inputValue : (String) -> Formlet (String)
fun inputValue(v) {
  inputValueA(v, [])
}

# A "file" type input.
sig inputFile : Formlet (String)
var inputFile = fun (gen) {inputFileA([])(gen)};

sig textarea : (String) -> Formlet (String)
fun textarea(value) {
  mkInput(fun (name) { <textarea name="{name}">{stringToXml(value)}</textarea> },
          fun (name,value) { <textarea name="{name}">{stringToXml(value)}</textarea> })
}

# raw submit button
sig submit : (String) -> Xml
fun submit(text) {
  <button type="submit">{stringToXml(text)}</button>
}

# button that returns true iff it is pressed
sig button : (String,[|Submit|Reset|Button|]) -> Formlet (Bool)
fun button(text, behaviour) {
  nextName >>= fun (name) {
    var behaviour = switch (behaviour) {
      case Submit -> "submit"
      case Reset -> "reset"
      case Button -> "button"
    };
    var xml = <button name="{name}" value="here" type="{behaviour}">{stringToXml(text)}</button>;
    return ((xml,
             fun (env) { (xml, pureE (memassoc(name, env))) }))
  }
}

sig submitButton : (String) -> Formlet (Bool)
fun submitButton(text) {
  button(text, Submit)
}

sig resetButton : (String) -> Formlet (Bool)
fun resetButton(text) {
  button(text, Reset)
}

sig pushButton : (String) -> Formlet (Bool)
fun pushButton(text) {
  button(text, Button)
}

sig checkbox : Formlet (Bool)
var checkbox =
  fun (gen) {
    (nextName >>= fun (name) {
     var xml = <input type="checkbox" name="{name}" value="yes" />;
     return ((xml,
             fun (env) { (xml, pureE (memassoc(name, env))) }))})(gen)
  };


# before ++ [selected] ++ after is a list of (value, data) pairs
# layout is a function for rendering a list of (radio button, data) pairs
#
# [NOTE]
#   A default selection is compulsory as recommended by the HTML spec.
#   We should probably do the same for 'choice' (drop-down menus) as well.
#
# It is the user's responsibility to ensure that layout produces Xml that
# uses each radio button exactly once and does not introduce any other input
# elements.
#
# The data components are useful for attaching extra data such as labels to
# the radio buttons.
sig inputRadiogroup : ([(String, a)], (String, a), [(String,a)], ([(Xml, a)]) -> Xml) -> Formlet (String) 
fun inputRadiogroup(before, selected, after, layout) {
  nextName >>= fun (name) {
    var before = for (var (value, data) <- before)
                  [(<input type="radio" name="{name}" value="{value}" />, data)];
    var selected = [(<input type="radio" checked="on" name="{name}" value="{selected.1}" />, selected.2)];
    var after = for (var (value, data) <- after)
                  [(<input type="radio" name="{name}" value="{value}" />, data)];
    var xml = layout(before ++ selected ++ after);
    return ((xml, fun (env) { (xml, pureE(assoc(name, env)))}))
  }
}

sig preludeOption : ((a,String), Bool) -> State(Gen,(Xml, ((String) -> [a]) -> (String) -> [a]))
fun preludeOption ((a,b), selected) {
   nextName >>= fun (name) {
        if(selected) {
           return ((<option value="{name}" selected="SELECTED">{stringToXml(b)}</option>,
            (fun (k) (key) { if (key == name) a::k(key) else k(key) })))
        }
        else {
           return ((<option value="{name}">{stringToXml(b)}</option>,
            (fun (k) (key) { if (key == name) a::k(key) else k(key) })))
        }
}}


sig preludeOptions : ([(a,String)], a) -> State(Gen,(Xml, (String) -> [a]))
fun preludeOptions(items, default) {
  switch (items) {
     case [] -> return ((<#/>, fun (_) { [] }))
     case item::items -> 
       preludeOption(item, (first(item) == default))
                     >>= fun ((xml, r1)) { preludeOptions(items, default)
                     >>= fun ((morexml, r2)) { return ((xml ++ morexml, r1(r2))) } }
  }
}

sig preludeMultiOptions
     : ([(a,String,Bool)]) -> State(Gen,(Xml, (String) -> [a]))
fun preludeMultiOptions(items) {
  switch (items) {
     case [] -> return ((<#/>, fun (_) { [] }))
     case item::items ->
       preludeOption((first(item),second(item)), third(item))
                     >>= fun ((xml, r1)) { preludeMultiOptions(items)
                     >>= fun ((morexml, r2)) { return ((xml ++ morexml, r1(r2))) } }
  }
}

sig choice : ([(a,String)]) -> Formlet (a)
fun choice (items) {
  var (default, _) = hd(items);
  nextName >>= fun (name) {
  preludeOptions(items, default) >>= fun ((xml, retrieve)) {
  var xml = <select name="{name}">{xml}</select>;
  return ((xml,
           fun (env) { (xml, pureE(hd(retrieve(assoc(name, env))))) }))}}
}

sig choiceDefault : ([(a,String)], a) -> Formlet (a)
fun choiceDefault (items, default) {
  nextName >>= fun (name) {
     preludeOptions(items, default) >>= fun ((xml, retrieve)) {
        var xml = <select name="{name}">{xml}</select>;
        return ((xml,
                 fun (env) { (xml, pureE(hd(retrieve(assoc(name, env))))) }))
     }
  }
}

sig choices : ([(a,String, Bool)]) -> Formlet ([a])
fun choices (items) {
  nextName >>= fun (name) {
     preludeMultiOptions(items) >>= fun ((xml, retrieve)) {
        var xml = <select name="{name}" multiple="multiple">{xml}</select>;
        return ((xml,
                 fun (env) { (xml, pureE(concatMap(retrieve, assocAll(name,env)))) }))

     }
  }
}

sig choicesNone : ([(a, String)]) -> Formlet ([a])
fun choicesNone (items) {
  choices (map (fun ((v, name)) {(v, name, false)}, items))
}

typename Either (a,b) = [|Left:a | Right : b|];

# given a formlet and a "predicate", return a new formlet that uses
# the predicate for validation.
sig satisfies : (Formlet (a), (a,Xml) -> Either(Xml,Xml)) -> Formlet(a)
fun satisfies(f, validate) {
   f >>= fun((xml,collector)) {
   return((xml, fun (env) { 
       var (cxml, val) = collector(env);
       switch (val) {
         case Nothing  -> (cxml, Nothing)
         case Just (v) -> 
            switch (validate(v, cxml)) {
               case Right (xml) -> (xml, Nothing)
               case Left (xml)  -> (xml, Just (v)) }}}))}
}


sig errorMsg : ((a) -> Bool, (a) -> String) -> (a,Xml) -> Either (Xml,Xml)
fun errorMsg (f, msg) (x,xml) {
  if (f(x)) Left (xml)
  else Right (<span class="errorinput">{xml} </span>
          ++ <span class="error"> {stringToXml(msg(x))}</span>)
}

infixr 5 `errorMsg`;

sig transform : (Formlet(a), (a) -> Bool, (a) -> String, (a) -> b) -> Formlet(b)
fun transform(f, predicate, error, g) {
  formlet
    <#>{f `satisfies` (predicate `errorMsg` error) -> v}</#>
  yields
    g(v)
}

### checked input components

sig inputInt : Formlet(Int)
var inputInt = fun (gen) {transform(input, isInt, fun (s) {s ++ " is not an integer"}, stringToInt)(gen)};

sig inputIntA : (Attributes) -> Formlet(Int)
fun inputIntA(attributes) {
  transform(inputA(attributes), isInt, fun (s) {s ++ " is not an integer"}, stringToInt)
}

sig inputIntValue : (Int) -> Formlet(Int)
fun inputIntValue(v) {
  transform(inputA([("value", intToString(v))]), isInt, fun (s) {s ++ "is not an integer"}, stringToInt)
}

sig inputFloat : Formlet(Float)
var inputFloat = fun (gen) {transform(input, isFloat, fun (s) {s ++ " is not a float"}, stringToFloat)(gen)};
