Nested variant matching [1]
switch A (A) { case A (A) -> 0; case A (B) -> 1; }
stdout : 0 : Int

Nested variant matching [2]
switch A (A) { case A (B) -> 0; case A (A) -> 1; }
stdout : 1 : Int

Constant patterns [1]
switch A (1) { case A (0) -> 0; case A (1) -> 1; }
stdout : 1 : Int

Constant patterns [2]
switch A (1) { case A (0) -> 0; case _ -> 1; }
stdout : 1 : Int

Constant patterns [3]
switch A (1) { case A (0) -> 0; case A (x) -> 1; }
stdout : 1 : Int

Default pattern
switch A { case _ -> 0; }
stdout : 0 : Int

Integer pattern
switch 0 { case x -> x+1; }
stdout : 1 : Int

List pattern
switch A ([]) { case A (_::_) -> 0; case A ([]) -> 1; }
stdout : 1 : Int

HasType pattern [1]
switch 1 {case (0:Int) -> 0; case (1:Int) -> 1;}
stdout : 1 : Int

HasType pattern [2]
switch 1 {case (1:Int) -> 1; case (x:String) -> 0;}
stderr : @..*
exit : 1

HasType pattern [3]
switch A {case A -> 0; case (x:[|A | B:[|C:String|] |]) -> 1;}
stdout : 0 : Int

HasType pattern [4]
switch A {case A -> 0; case B(C(x:String)) -> 1;}
stdout : 0 : Int

As pattern
switch 1 {case 1 as x -> x;}
stdout : 1 : Int
