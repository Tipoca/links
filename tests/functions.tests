Function typing bug (see jdy's blog, 2005-10-24)
(fun (x,y) { [x] ++ [y] }) ([1],"a")
stderr : @..*
exit : 1

Type annotations on functions
fun (x) { x } : (String) -> String
stdout : fun : (String) -> String

Incorrect type annotations rejected
fun (x) { x + 1 } : (Float) -> String
stderr : @..*
exit : 1

Loose type annotations on functions
fun (x) { x } : (b) -> b
stdout : @fun : \(([a-z])\) -> \1

Trailing semicolon means "ignore the final value" [1]
{ 2 }
stdout : 2 : Int

Trailing semicolon means "ignore the final value" [2]
{ 2; }
stderr : @.*
exit : 1

Trailing semicolon means "ignore the final value" [3]
fun () { 2 }
stdout : fun : () -> Int

Trailing semicolon means "ignore the final value" [4]
fun () { 2; }
stderr : @.*
exit : 1

Type annotations
fun (x:Int) {x:Int}
stdout : fun : (Int) -> Int

Identity annotation
fun (x:a) {x:a}
stdout : @fun : \(([a-z]+)\) -> \1

Type annotation scope
fun (x:a, y:a) {(x, y)}
stdout : @fun : \(([a-z]+), \1\) -> \(\1, \1\)

Negative recursive type
fun (x) {x:a} : a
stderr : @.*
exit : 1

Typename [1]
typename Foo = Int; fun f(x:Foo) {x} f(1)
stdout : 1 : Foo

Typename [2]
typename Bar(a,b,c) = (a,b,c); fun f(x:Bar(a,b,c)) {x} f((false, 1, "two"))
stdout : (false, 1, "two") : Bar (Bool,Int,String)

Typename [3]
typename F(a) = (a) -> a; sig f : F(Int) fun f(x) {recv() + x} sig g : F(Int) fun g(x) {stringToInt(recv()) + x} g
stdout : fun : (Int) -{String}-> Int

Abs
(abs fun (x) { x }) ('2',3,true)
stdout : ('2', 3, true) : (Char, Int, Bool)

Abs does not apply to zero-argument functions
abs fun () { }
stderr : @.*
exit : 1

Abs does not apply to two-argument functions
abs fun (x,y) { }
stderr : @.*
exit : 1

App [1]
var x = (1,2); fun (x,y) { x + y } app x
stdout : 3 : Int

App [2]
fun (x) { x + 1 } app (1=3)
stdout : 4 : Int

App [3]
fun () { 3 } app ()
stdout : 3 : Int

App second argument must be a tuple [1]
fun (x) { x + 1 } app 3
stderr : @..*
exit : 1

App second argument must be a tuple [1]
fun (f,x:Int) { f app x }
stderr : @..*
exit : 1

Abs and app on non-tuple records
(abs fun (x) { x }) app (x=3)
stdout : (x=3) : (x:Int)
