Lexical scoping at top-level
x = 3; fun y(a) { x + a }; x = 4; y(10)
stderr : @..*
exit : 1

Nested scopes
{ var x = 3; ({ var x = 4; x }, x)}
stdout : (4, 3) : (Int, Int)

Non-recursive top-level functions:
var f = fun(x) { f(x) }
stderr : @..*
exit : 1

Non-recursive block-scope functions:
{ var f = fun(x) { f(x) }; () }
stderr : @..*
exit : 1

Mutually recursive top-level functions
fun evn(n) { n == 0 || od(n - 1) } fun od(n) { evn(n) == false } evn(20)
stdout : true : Bool
exit : 0

Mutually recurisve nested functions
{ fun even(n) { n == 0 || odd(n - 1) } fun odd(n) { even(n) == false } even(20) }
stdout : true : Bool
exit : 0
        
Closures using anonymous functions
fun addn(n) { fun(x) { x + n } } addn(3)(4)
stdout : 7 : Int
exit : 0

Closures using named functions
fun addn(n) { fun f(x) { x + n } f } addn(3)(4)
stdout : 7 : Int
exit : 0

Closures where the environment contains a closure from a different scope
fun add(x,y){x+y} fun baz(z, w) {z + w} fun foo(f, x) { fun bar(y) { f(3, y) } bar(x) } foo(add,4)
stdout : 7 : Int
exit : 0

handle HTML with VAR -> HANDLER construction
handle <html>{handler; <body/>}</html> with r -> r
stdout : @<html>.*</html> : Xml

No value recursion
fun f() { g() } var x = f(); fun g() { x }
stderr : @.
exit : 1

as patterns
{var x::xs as y = [1,2,3]; y}
stdout : [1, 2, 3] : [Int]

Reject multiple occurrences of a name in a pattern [1]
fun (x,x) { x }
stderr : @.
exit : 1

Reject multiple occurrences of a name in a pattern [2]
fun () { var (x,x) = (1,2); x }
stderr : @.
exit : 1

Reject multiple occurrences of a name in a pattern [3]
fun () { var (a=x,b=x) = (a=1,b=2); x }
stderr : @.
exit : 1

Check that recursive bindings don't destroy the local environments of values in the local environment (see bug report from Thierry, 2006-09-17 on links-users)
fun (z) { fun s() {} z() }(fun (aa)() { aa() }(fun (x){x}))
stdout : () : ()

Bug in interaction between pattern-matching and anonymous functions
(fun (l) { switch (l) { case x::xs -> fun (x) { x } } })([1])(2)
stdout : 2 : Int
